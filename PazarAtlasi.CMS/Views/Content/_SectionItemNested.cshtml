@using PazarAtlasi.CMS.Application.Dtos
@using PazarAtlasi.CMS.Models.ViewModels
@model PazarAtlasi.CMS.Models.ViewModels.SectionItemViewModel

@{
    var parentItem = ViewBag.ParentItem as SectionItemViewModel;
    var level = ViewBag.Level as int? ?? 1;
    var availableLanguages = ViewBag.AvailableLanguages as List<LanguageViewModel> ?? new List<LanguageViewModel>();

    // Define colors and indentation based on nesting level
    var levelColors = new[]
    {
        ("purple", "purple-50", "purple-200", "purple-600", "purple-100", "purple-700"),
        ("indigo", "indigo-50", "indigo-200", "indigo-600", "indigo-100", "indigo-700"),
        ("blue", "blue-50", "blue-200", "blue-600", "blue-100", "blue-700")
    };
    var colorIndex = Math.Min(level - 1, levelColors.Length - 1);
    var (colorName, bgColor, borderColor, iconColor, buttonBg, buttonHover) = levelColors[colorIndex];

    var marginLeft = level * 4; // ml-4, ml-8, ml-12, etc.
}

@if (parentItem?.ChildItems != null && parentItem.ChildItems.Any())
{
    <div class="mt-4 pt-4 border-t border-slate-200">
        <div class="flex items-center justify-between mb-3">
            <h5 class="text-xs font-semibold text-slate-700 uppercase tracking-wider">
                <i class="fas fa-level-down-alt mr-2 text-@(iconColor)"></i>
                Nested Items (@parentItem.ChildItems.Count) - Level @level
            </h5>
            <div class="flex items-center space-x-2">
                @if (level == 1)
                {
                    <button type="button" onclick="toggleAllChildItems()" 
                            class="text-xs px-2 py-1 bg-slate-100 hover:bg-slate-200 text-slate-600 rounded transition-colors"
                            title="Toggle all child items">
                        <i class="fas fa-expand-alt mr-1"></i> Collapse All
                    </button>
                }
                <button type="button" onclick="toggleChildItems(this)" 
                        class="text-xs px-2 py-1 bg-@(buttonBg) hover:bg-@(buttonHover) text-@(iconColor) rounded transition-colors"
                        title="Toggle child items">
                    <i class="fas fa-chevron-up mr-1"></i> Hide
                </button>
            </div>
        </div>

        <div class="nested-items-container space-y-2 ml-@(marginLeft) pl-3 border-l-2 border-@(borderColor)">
            @foreach (var childItem in parentItem.ChildItems)
            {
                ViewBag.AvailableLanguages = availableLanguages;

                @if (childItem != null)
                {
                    <div class="nested-item-card bg-@(bgColor) border border-@(borderColor) rounded p-3"
                         data-nested-id="@childItem.Id"
                         data-nested-type="@((int)childItem.Type)"
                         data-level="@level">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-xs font-medium text-slate-600">
                                <i class="fas fa-link mr-1"></i>
                                @(childItem.Translations?.FirstOrDefault()?.Title ?? childItem.Type.ToString()) #@childItem.SortOrder
                            </span>
                            @if (childItem.AllowReorder)
                            {
                                <button type="button" onclick="this.closest('.nested-item-card').remove();"
                                        class="text-red-500 hover:text-red-700 text-xs"
                                        title="Remove this nested item">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>

                        <!-- Render fields for this nested item -->
                        <div class="nested-field-list space-y-2">
                            @foreach (var field in childItem.Fields ?? new List<SectionItemFieldViewModel>())
                            {
                                ViewBag.Field = field;
                                ViewBag.Item = childItem;
                                ViewBag.ParentItemId = parentItem.Id;
                                ViewBag.Level = level;
                                var fieldViewModel = childItem.Fields?.FirstOrDefault(f => f.FieldKey == field.FieldKey);
                                ViewBag.Value = fieldViewModel?.FieldValue;

                                @await Html.PartialAsync("~/Views/Content/_SectionItemField.cshtml", field)
                            }
                        </div>

                        <!-- RECURSIVE: Render deeper nested items if they exist -->
                        @if (childItem.ChildItems != null && childItem.ChildItems.Any())
                        {
                            ViewBag.ParentItem = childItem;
                            ViewBag.ChildItems = childItem.ChildItems;
                            ViewBag.Level = level + 1;

                            @await Html.PartialAsync("~/Views/Content/_SectionItemNested.cshtml")
                        }
                    </div>
                }
            }
        </div>
    </div>
}


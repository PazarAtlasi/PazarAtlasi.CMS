@using PazarAtlasi.CMS.Application.Dtos
@using PazarAtlasi.CMS.Models.ViewModels
@{
    var parentItem = ViewBag.ParentItem as SectionItemViewModel;
    var nestedConfigs = ViewBag.NestedConfigs as List<SectionItemConfiguration>;
    var level = ViewBag.Level as int? ?? 1;
    var availableLanguages = ViewBag.AvailableLanguages as List<LanguageViewModel> ?? new List<LanguageViewModel>();
    
    // Define colors and indentation based on nesting level
    var levelColors = new[] 
    { 
        ("purple", "purple-50", "purple-200", "purple-600", "purple-100", "purple-700"),
        ("indigo", "indigo-50", "indigo-200", "indigo-600", "indigo-100", "indigo-700"),
        ("blue", "blue-50", "blue-200", "blue-600", "blue-100", "blue-700")
    };
    var colorIndex = Math.Min(level - 1, levelColors.Length - 1);
    var (colorName, bgColor, borderColor, iconColor, buttonBg, buttonHover) = levelColors[colorIndex];
    
    var marginLeft = level * 4; // ml-4, ml-8, ml-12, etc.
}

@if (parentItem?.ChildItems != null && parentItem.ChildItems.Any() && nestedConfigs != null && nestedConfigs.Any())
{
    <div class="mt-4 pt-4 border-t border-slate-200">
        <div class="flex items-center justify-between mb-3">
            <h5 class="text-xs font-semibold text-slate-700 uppercase tracking-wider">
                <i class="fas fa-level-down-alt mr-2 text-@(iconColor)"></i>
                Nested Items (@parentItem.ChildItems.Count) - Level @level
            </h5>
        </div>
        
        <div class="space-y-2 ml-@(marginLeft) pl-3 border-l-2 border-@(borderColor)">
            @foreach (var childItem in parentItem.ChildItems)
            {
                ViewBag.AvailableLanguages = availableLanguages;

                // Find matching configuration for this child item's type
                var childConfig = nestedConfigs.FirstOrDefault(nc => nc.ItemType == childItem.Type);
                
                @if (childConfig != null)
                {
                    <div class="nested-item-card bg-@(bgColor) border border-@(borderColor) rounded p-3" 
                         data-nested-id="@childItem.Id" 
                         data-nested-type="@childItem.Type"
                         data-level="@level">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-xs font-medium text-slate-600">
                                <i class="fas fa-link mr-1"></i>
                                @(childConfig.Translations?.FirstOrDefault()?.Title ?? childItem.Type.ToString()) #@childItem.SortOrder
                            </span>
                            @if (childConfig.AllowDynamicSectionItems)
                            {
                                <button type="button" onclick="SectionModal.removeNestedItem('@parentItem.Id', '@childItem.Id', @level)"
                                        class="text-red-500 hover:text-red-700 text-xs">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                        
                        <!-- Render fields for this nested item -->
                        <div class="nested-field-list space-y-2">
                            @foreach (var field in childConfig.Fields ?? new List<SectionItemFieldDto>())
                            {
                                ViewBag.Field = field;
                                ViewBag.Item = childItem;
                                ViewBag.ParentItemId = parentItem.Id;
                                ViewBag.Level = level;
                                var fieldViewModel = childItem.Fields?.FirstOrDefault(f => f.FieldKey == field.FieldKey);
                                ViewBag.Value = fieldViewModel?.FieldValue ?? field.DefaultValue ?? "";

                                @await Html.PartialAsync("~/Views/Content/_SectionItemField.cshtml", field)
                            }
                        </div>
                        
                        <!-- RECURSIVE: Render deeper nested items if they exist -->
                        @if (childItem.ChildItems != null && childItem.ChildItems.Any() && 
                             childConfig.SectionItems != null && childConfig.SectionItems.Any())
                        {
                            ViewBag.ParentItem = childItem;
                            ViewBag.NestedConfigs = childConfig.SectionItems;
                            ViewBag.Level = level + 1;
                            
                            @await Html.PartialAsync("~/Views/Content/_SectionItemNested.cshtml")
                        }
                    </div>
                    
                    <!-- Add button for this nested item type -->
                    @if (childConfig.AllowDynamicSectionItems)
                    {
                        var currentCount = parentItem.ChildItems.Count(ci => ci.Type == childConfig.ItemType);
                        var canAddMore = childConfig.MaxItems == null || currentCount < childConfig.MaxItems;
                        
                        @if (canAddMore)
                        {
                            <button type="button" 
                                    onclick="SectionModal.addNestedItemByType('@parentItem.Id', '@childConfig.ItemType', @level)"
                                    class="w-full mt-2 px-2 py-1 bg-white hover:bg-@(buttonBg) text-@(iconColor) hover:text-@(iconColor) rounded text-xs transition-colors border-2 border-@(borderColor)">
                                <i class="fas fa-plus mr-1"></i> @(childConfig.UIConfiguration?.AddButtonText ?? $"Add {childConfig.ItemType}")
                                @if (childConfig.MaxItems != null)
                                {
                                    <span class="ml-2">(@currentCount/@childConfig.MaxItems)</span>
                                }
                            </button>
                        }
                    }
                }
            }
        </div>
    </div>
}


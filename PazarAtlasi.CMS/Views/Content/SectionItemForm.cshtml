@model PazarAtlasi.CMS.Models.ViewModels.SectionItemFormViewModel

@{
    ViewData["Title"] = Model.FormTitle;
}

<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header -->
        <div class="bg-white shadow-sm rounded-lg border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center">
                    <i class="fas @(Model.IsEditMode ? "fa-edit" : "fa-plus") text-blue-600 mr-3 text-xl"></i>
                    <h1 class="text-2xl font-bold text-gray-900">@Model.FormTitle</h1>
                </div>
            </div>

            <div class="p-6">
                <!-- Error/Success Messages -->
                @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <div class="mb-6 bg-red-50 border border-red-200 rounded-lg p-4 flex items-center">
                        <i class="fas fa-exclamation-circle text-red-600 mr-3"></i>
                        <span class="text-red-800">@Model.ErrorMessage</span>
                        <button type="button" class="ml-auto text-red-600 hover:text-red-800"
                                onclick="this.parentElement.style.display='none'">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.SuccessMessage))
                {
                    <div class="mb-6 bg-green-50 border border-green-200 rounded-lg p-4 flex items-center">
                        <i class="fas fa-check-circle text-green-600 mr-3"></i>
                        <span class="text-green-800">@Model.SuccessMessage</span>
                        <button type="button" class="ml-auto text-green-600 hover:text-green-800"
                                onclick="this.parentElement.style.display='none'">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                }

                <form asp-action="SectionItemForm" method="post" class="space-y-8">
                    @if (Model.IsEditMode)
                    {
                        <input type="hidden" asp-for="SectionItem.Id" />
                    }

                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <!-- Basic Information -->
                        <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                            <div class="px-6 py-4 border-b border-gray-200">
                                <h3 class="text-lg font-medium text-gray-900">Basic Information</h3>
                            </div>
                            <div class="p-6 space-y-6">
                                <div>
                                    <label asp-for="SectionItem.Type" class="block text-sm font-medium text-gray-700 mb-2">
                                        Type <span class="text-red-500">*</span>
                                    </label>
                                    <select asp-for="SectionItem.Type"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            asp-items="@(new SelectList(Model.SectionItemTypes))" required>
                                        <option value="">Select Type</option>
                                    </select>
                                    <span asp-validation-for="SectionItem.Type" class="text-red-600 text-sm"></span>
                                </div>

                                <div>
                                    <label asp-for="SectionItem.MediaType" class="block text-sm font-medium text-gray-700 mb-2">
                                        Media Type <span class="text-red-500">*</span>
                                    </label>
                                    <select asp-for="SectionItem.MediaType"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                            asp-items="@(new SelectList(Model.MediaTypes))" required>
                                        <option value="">Select Media Type</option>
                                    </select>
                                    <span asp-validation-for="SectionItem.MediaType" class="text-red-600 text-sm"></span>
                                </div>

                                <div>
                                    <label asp-for="SectionItem.TemplateId"
                                           class="block text-sm font-medium text-gray-700 mb-2">Template</label>
                                    <select asp-for="SectionItem.TemplateId"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                        <option value="">No Template</option>
                                        @foreach (var template in Model.Templates)
                                        {
                                            <option value="@template.Id">
                                                @(template.Translations.FirstOrDefault()?.Name ?? template.TemplateKey)
                                            </option>
                                        }
                                    </select>
                                    <p class="mt-1 text-sm text-gray-500">Select a template to inherit field definitions</p>
                                    <span asp-validation-for="SectionItem.TemplateId" class="text-red-600 text-sm"></span>
                                </div>

                                <div>
                                    <label asp-for="SectionItem.ParentSectionItemId"
                                           class="block text-sm font-medium text-gray-700 mb-2">Parent Section Item</label>
                                    <select asp-for="SectionItem.ParentSectionItemId"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                        <option value="">No Parent (Root Item)</option>
                                        @foreach (var parentItem in Model.ParentSectionItems)
                                        {
                                            <option value="@parentItem.Id">
                                                @(parentItem.Translations.FirstOrDefault()?.Title ?? parentItem.Title ?? $"Item {parentItem.Id}")
                                            </option>
                                        }
                                    </select>
                                    <p class="mt-1 text-sm text-gray-500">Select a parent item to create a nested structure</p>
                                    <span asp-validation-for="SectionItem.ParentSectionItemId" class="text-red-600 text-sm"></span>
                                </div>

                                <div>
                                    <label asp-for="SectionItem.SortOrder" class="block text-sm font-medium text-gray-700 mb-2">Sort Order</label>
                                    <input asp-for="SectionItem.SortOrder"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                           type="number" />
                                    <p class="mt-1 text-sm text-gray-500">Lower numbers appear first</p>
                                    <span asp-validation-for="SectionItem.SortOrder" class="text-red-600 text-sm"></span>
                                </div>

                                <div>
                                    <label asp-for="SectionItem.Key" class="block text-sm font-medium text-gray-700 mb-2">Key</label>
                                    <input asp-for="SectionItem.Key"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                           placeholder="Unique key for this item" />
                                    <p class="mt-1 text-sm text-gray-500">Optional unique identifier</p>
                                    <span asp-validation-for="SectionItem.Key" class="text-red-600 text-sm"></span>
                                </div>

                                <div>
                                    <label asp-for="SectionItem.IconClass" class="block text-sm font-medium text-gray-700 mb-2">Icon Class</label>
                                    <input asp-for="SectionItem.IconClass"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                           placeholder="e.g., fas fa-home" />
                                    <p class="mt-1 text-sm text-gray-500">FontAwesome icon class (optional)</p>
                                    <span asp-validation-for="SectionItem.IconClass" class="text-red-600 text-sm"></span>
                                </div>
                            </div>
                        </div>

                        <!-- Settings & Template Preview -->
                        <div class="space-y-6">
                            <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                                <div class="px-6 py-4 border-b border-gray-200">
                                    <h3 class="text-lg font-medium text-gray-900">Settings</h3>
                                </div>
                                <div class="p-6 space-y-6">
                                    <div class="flex items-start">
                                        <input asp-for="SectionItem.AllowReorder"
                                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-1"
                                               type="checkbox" />
                                        <div class="ml-3">
                                            <label asp-for="SectionItem.AllowReorder" class="text-sm font-medium text-gray-700">
                                                Allow Reorder
                                            </label>
                                            <p class="text-sm text-gray-500">Allow this item to be reordered in the UI</p>
                                        </div>
                                    </div>

                                    <div class="flex items-start">
                                        <input asp-for="SectionItem.AllowRemove"
                                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-1"
                                               type="checkbox" />
                                        <div class="ml-3">
                                            <label asp-for="SectionItem.AllowRemove" class="text-sm font-medium text-gray-700">
                                                Allow Remove
                                            </label>
                                            <p class="text-sm text-gray-500">Allow this item to be removed from the UI</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (Model.ShowNestedStructure)
                            {
                                <!-- Nested Structure -->
                                <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                                    <div class="px-6 py-4 border-b border-gray-200">
                                        <h3 class="text-lg font-medium text-gray-900 flex items-center">
                                            <i class="fas fa-sitemap text-blue-600 mr-2"></i>
                                            Item Structure
                                        </h3>
                                    </div>
                                    <div class="p-6">
                                        <div class="space-y-4">
                                            @if (Model.ParentItem != null)
                                            {
                                                <!-- Parent Item -->
                                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                                    <div class="flex items-center justify-between">
                                                        <div class="flex items-center">
                                                            <i class="fas fa-level-up-alt text-blue-600 mr-3"></i>
                                                            <div>
                                                                <h4 class="text-sm font-medium text-blue-900">Parent Item</h4>
                                                                <p class="text-sm text-blue-700">
                                                                    @(Model.ParentItem.Translations.FirstOrDefault()?.Title ?? Model.ParentItem.Title ?? $"Item {Model.ParentItem.Id}")
                                                                </p>
                                                                @if (!string.IsNullOrEmpty(Model.ParentItem.Description))
                                                                {
                                                                    <p class="text-xs text-blue-600 mt-1">@Model.ParentItem.Description</p>
                                                                }
                                                            </div>
                                                        </div>
                                                        <a href="@Url.Action("SectionItemForm", "Content", new { id = Model.ParentItem.Id })"
                                                           class="inline-flex items-center px-3 py-1.5 border border-blue-300 text-xs font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                                            <i class="fas fa-edit mr-1"></i>
                                                            Edit Parent
                                                        </a>
                                                    </div>
                                                </div>
                                            }

                                            <!-- Current Item -->
                                            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                                                <div class="flex items-center">
                                                    <i class="fas fa-dot-circle text-green-600 mr-3"></i>
                                                    <div>
                                                        <h4 class="text-sm font-medium text-green-900">Current Item</h4>
                                                        <p class="text-sm text-green-700">
                                                            @(Model.SectionItem.Translations.FirstOrDefault()?.Title ?? Model.SectionItem.Title ?? $"Item {Model.SectionItem.Id}")
                                                        </p>
                                                        @if (!string.IsNullOrEmpty(Model.SectionItem.Description))
                                                        {
                                                            <p class="text-xs text-green-600 mt-1">@Model.SectionItem.Description</p>
                                                        }
                                                    </div>
                                                </div>
                                            </div>

                                            @if (Model.ChildItems.Any())
                                            {
                                                <!-- Child Items -->
                                                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                                                    <div class="flex items-center justify-between mb-3">
                                                        <div class="flex items-center">
                                                            <i class="fas fa-level-down-alt text-gray-600 mr-3"></i>
                                                            <h4 class="text-sm font-medium text-gray-900">Child Items (@Model.ChildItems.Count)</h4>
                                                        </div>
                                                    </div>
                                                    <div class="space-y-2 max-h-64 overflow-y-auto">
                                                        @foreach (var childItem in Model.ChildItems)
                                                        {
                                                            <div class="bg-white border border-gray-200 rounded-md p-3 hover:bg-gray-50 transition-colors">
                                                                <div class="flex items-center justify-between">
                                                                    <div class="flex items-center">
                                                                        @if (!string.IsNullOrEmpty(childItem.IconClass))
                                                                        {
                                                                            <i class="@childItem.IconClass text-gray-500 mr-3"></i>
                                                                        }
                                                                        else
                                                                        {
                                                                            <i class="fas fa-cube text-gray-500 mr-3"></i>
                                                                        }
                                                                        <div>
                                                                            <p class="text-sm font-medium text-gray-900">
                                                                                @(childItem.Translations.FirstOrDefault()?.Title ?? childItem.Title ?? $"Item {childItem.Id}")
                                                                            </p>
                                                                            @if (!string.IsNullOrEmpty(childItem.Description))
                                                                            {
                                                                                <p class="text-xs text-gray-600">@childItem.Description</p>
                                                                            }
                                                                            <div class="flex items-center space-x-2 mt-1">
                                                                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                                                                                    @childItem.Type
                                                                                </span>
                                                                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">
                                                                                    @childItem.MediaType
                                                                                </span>
                                                                                <span class="text-xs text-gray-500">Order: @childItem.SortOrder</span>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <a href="@Url.Action("SectionItemForm", "Content", new { id = childItem.Id })"
                                                                       class="inline-flex items-center px-2 py-1 border border-gray-300 text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                                                        <i class="fas fa-edit mr-1"></i>
                                                                        Edit
                                                                    </a>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Translations -->
                    <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Translations</h3>
                        </div>
                        <div class="p-6">
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                @for (int i = 0; i < Model.SectionItem.Translations.Count; i++)
                                {
                                    var translation = Model.SectionItem.Translations[i];
                                    var language = Model.AvailableLanguages.FirstOrDefault(l => l.Id == translation.LanguageId);

                                    <div class="border border-gray-200 rounded-lg">
                                        <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                                            <h4 class="text-sm font-medium text-gray-900 flex items-center">
                                                <i class="fas fa-language text-blue-600 mr-2"></i>
                                                @(language?.Name ?? "Unknown Language")
                                                <span class="ml-2 text-xs text-gray-500">(@(language?.Code ?? "N/A"))</span>
                                            </h4>
                                        </div>
                                        <div class="p-4 space-y-4">
                                            <input type="hidden" asp-for="SectionItem.Translations[i].Id" />
                                            <input type="hidden" asp-for="SectionItem.Translations[i].SectionItemId" />
                                            <input type="hidden" asp-for="SectionItem.Translations[i].LanguageId" />

                                            <div>
                                                <label asp-for="SectionItem.Translations[i].Title"
                                                       class="block text-sm font-medium text-gray-700 mb-2">Title</label>
                                                <input asp-for="SectionItem.Translations[i].Title"
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                       placeholder="Enter title in @(language?.Name ?? "this language")" />
                                                <span asp-validation-for="SectionItem.Translations[i].Title"
                                                      class="text-red-600 text-sm"></span>
                                            </div>

                                            <div>
                                                <label asp-for="SectionItem.Translations[i].Description"
                                                       class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                                                <textarea asp-for="SectionItem.Translations[i].Description"
                                                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                          rows="3"
                                                          placeholder="Enter description in @(language?.Name ?? "this language")"></textarea>
                                                <span asp-validation-for="SectionItem.Translations[i].Description"
                                                      class="text-red-600 text-sm"></span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Fields Section -->
                    <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                            <div class="flex items-center">
                                <h3 class="text-lg font-medium text-gray-900">Fields</h3>
                                <span class="ml-3 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                    @Model.SectionItem.Fields.Count field(s)
                                </span>
                            </div>
                            <button type="button"
                                    class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
                                    onclick="addField()"
                                    title="Add a new field to this section item">
                                <i class="fas fa-plus mr-2"></i>
                                Add Field
                            </button>
                        </div>
                        <div class="p-6">
                            <!-- No Fields Placeholder -->
                            <div id="noFieldsPlaceholder" class="text-center py-8 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300" style="display: @(Model.SectionItem.Fields.Any() ? "none" : "block")">
                                <i class="fas fa-plus-circle text-gray-400 text-3xl mb-3"></i>
                                <h4 class="text-lg font-medium text-gray-900 mb-2">No fields yet</h4>
                                <p class="text-gray-500 mb-4">Add fields to define the structure of this section item.</p>
                                <button type="button"
                                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
                                        onclick="addField()">
                                    <i class="fas fa-plus mr-2"></i>
                                    Add Your First Field
                                </button>
                            </div>

                            <!-- Fields Container -->
                            <div id="fieldsContainer" class="space-y-4">
                                @if (Model.SectionItem.Fields.Any())
                                {
                                    ViewBag.Languages = Model.AvailableLanguages.OrderByDescending(t => t.IsDefault).ThenBy(s => s.Name).ToList();
                                    var sortedFields = Model.SectionItem.Fields.OrderBy(s => s.SortOrder).ToList();
                                    @for (int i = 0; i < sortedFields.Count; i++)
                                    {
                                        ViewBag.FieldIndex = i;
                                        @await Html.PartialAsync("_SectionItemDetailField.cshtml", sortedFields[i])
                                    }
                                }
                            </div>
                        </div>
                    </div>

                    @if (Model.ShowFieldValuesSection)
                    {
                        <!-- Field Values Section -->
                        <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                            <div class="px-6 py-4 border-b border-gray-200">
                                <h3 class="text-lg font-medium text-gray-900">Field Values</h3>
                            </div>
                            <div class="p-6">
                                <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                                    <table class="min-w-full divide-y divide-gray-300">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Field</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Translations</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody class="bg-white divide-y divide-gray-200">
                                            @for (int i = 0; i < Model.SectionItem.FieldValues.Count; i++)
                                            {
                                                var fieldValue = Model.SectionItem.FieldValues[i];
                                                var field = Model.SectionItem.Fields.FirstOrDefault(f => f.Id == fieldValue.SectionItemFieldId);

                                                <tr class="hover:bg-gray-50">
                                                    <td class="px-6 py-4 whitespace-nowrap">
                                                        <div class="text-sm font-medium text-gray-900">@(field?.FieldName ?? "Unknown Field")</div>
                                                        <div class="text-sm text-gray-500">@(field?.FieldKey ?? "N/A")</div>
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap">
                                                        <input asp-for="SectionItem.FieldValues[i].Value" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                                                        <input type="hidden" asp-for="SectionItem.FieldValues[i].Id" />
                                                        <input type="hidden" asp-for="SectionItem.FieldValues[i].SectionId" />
                                                        <input type="hidden" asp-for="SectionItem.FieldValues[i].SectionItemId" />
                                                        <input type="hidden" asp-for="SectionItem.FieldValues[i].SectionItemFieldId" />
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap">
                                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                            @fieldValue.Translations.Count translations
                                                        </span>
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                        <button type="button" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" onclick="removeFieldValue(@i)">
                                                            <i class="fas fa-trash mr-1"></i>
                                                            Remove
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Form Actions -->
                    <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                        <div class="px-6 py-4">
                            <div class="flex justify-between">
                                <a href="@Url.Action("SectionItems", "Content")"
                                   class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    <i class="fas fa-arrow-left mr-2"></i>
                                    Back to List
                                </a>
                                <button type="submit"
                                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    <i class="fas fa-save mr-2"></i>
                                    @Model.SubmitButtonText
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Template selection change handler
            const templateSelect = document.getElementById('SectionItem_TemplateId');
            
            // Form validation
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function (e) {
                    const type = document.getElementById('SectionItem_Type').value;
                    const mediaType = document.getElementById('SectionItem_MediaType').value;

                    if (!type || !mediaType) {
                        e.preventDefault();

                        SwalHelper.warning(
                            'Eksik Bilgiler',
                            'Lütfen hem Type hem de Media Type seçiniz.',
                            {
                                confirmButtonText: 'Tamam'
                            }
                        );

                        return false;
                    }
                });
            }

            // Add smooth transitions to form elements
            const formElements = document.querySelectorAll('input, select, textarea');
            formElements.forEach(element => {
                element.addEventListener('focus', function () {
                    this.classList.add('ring-2', 'ring-blue-500', 'border-blue-500');
                });
                element.addEventListener('blur', function () {
                    this.classList.remove('ring-2', 'ring-blue-500', 'border-blue-500');
                });
            });
        });

        // Global field counter
        let fieldCounter = @Model.SectionItem.Fields.Count;

        // Global functions - defined at window level for onclick handlers
        window.toggleFieldDetails = function(fieldIndex) {
            const details = document.getElementById('fieldDetails_' + fieldIndex);
            const icon = document.getElementById('fieldToggleIcon_' + fieldIndex);

            if (details && icon) {
                if (details.style.display === 'none') {
                    details.style.display = 'block';
                    icon.className = 'fas fa-chevron-down';
                } else {
                    details.style.display = 'none';
                    icon.className = 'fas fa-chevron-right';
                }
            }
        };

        window.removeField = function(fieldIndex) {
            SwalHelper.confirmDelete(
                'Field Silinsin mi?',
                'Bu field ve tüm verileri kalıcı olarak silinecek. Bu işlem geri alınamaz.',
                {
                    confirmButtonText: '<i class="fas fa-trash mr-2"></i>Evet, Sil',
                    cancelButtonText: '<i class="fas fa-times mr-2"></i>İptal'
                }
            ).then((result) => {
                if (result.isConfirmed) {
                    const fieldCard = document.querySelector('[data-field-index="' + fieldIndex + '"]');
                    if (fieldCard) {
                        // Add fade out animation
                        fieldCard.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
                        fieldCard.style.opacity = '0';
                        fieldCard.style.transform = 'translateX(-20px)';

                        setTimeout(() => {
                            fieldCard.remove();
                            updateFieldIndices();
                            fieldCounter = Math.max(0, fieldCounter - 1);
                            updateFieldCountBadge();

                            // Show success toast
                            SwalHelper.toast('Field başarıyla silindi', 'success');
                        }, 300);
                    }
                }
            });
        };

        window.toggleFieldTranslations = function(fieldIndex) {
            const checkbox = document.getElementById('SectionItem_Fields_' + fieldIndex + '__IsTranslatable');
            const translationsDiv = document.getElementById('fieldTranslations_' + fieldIndex);

            if (checkbox && translationsDiv) {
                if (checkbox.checked) {
                    translationsDiv.style.display = 'block';
                    translationsDiv.style.opacity = '0';
                    translationsDiv.style.transform = 'translateY(-10px)';
                    setTimeout(() => {
                        translationsDiv.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
                        translationsDiv.style.opacity = '1';
                        translationsDiv.style.transform = 'translateY(0)';
                    }, 10);
                } else {
                    translationsDiv.style.display = 'none';
                }
            }
        };

        window.switchTranslationTab = function(fieldIndex, tabIndex, languageId) {
            // Hide all tab contents for this field
            const allContents = document.querySelectorAll('.translation-content-' + fieldIndex);
            allContents.forEach(content => {
                content.classList.add('hidden');
            });

            // Remove active class from all tabs
            const allTabs = document.querySelectorAll('.translation-tab-' + fieldIndex);
            allTabs.forEach(tab => {
                tab.classList.remove('border-blue-500', 'text-blue-600');
                tab.classList.add('border-transparent', 'text-gray-500');
            });

            // Show selected tab content
            const selectedContent = document.getElementById('translationTab_' + fieldIndex + '_' + tabIndex);
            if (selectedContent) {
                selectedContent.classList.remove('hidden');
            }

            // Add active class to selected tab
            const selectedTab = document.querySelector('.translation-tab-' + fieldIndex + '[data-tab-index="' + tabIndex + '"]');
            if (selectedTab) {
                selectedTab.classList.add('border-blue-500', 'text-blue-600');
                selectedTab.classList.remove('border-transparent', 'text-gray-500');
            }
        };

        function addField() {
            const fieldsContainer = document.getElementById('fieldsContainer');
            if (!fieldsContainer) {
                console.error('Fields container not found');
                return;
            }

            // Show loading indicator
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'bg-blue-50 border border-blue-200 rounded-lg p-4 flex items-center justify-center';
            loadingDiv.innerHTML = `
                <i class="fas fa-spinner fa-spin text-blue-600 mr-2"></i>
                <span class="text-blue-800">Adding new field...</span>
            `;
            fieldsContainer.appendChild(loadingDiv);

            // Make AJAX request to get new field partial
            fetch(`@Url.Action("GetNewFieldPartial", "Content")?fieldIndex=${fieldCounter}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(html => {
                    // Remove loading indicator
                    fieldsContainer.removeChild(loadingDiv);

                    // Add new field HTML
                    fieldsContainer.insertAdjacentHTML('beforeend', html);

                    // Increment counter
                    fieldCounter++;

                    // Update field indices for proper form binding
                    updateFieldIndices();

                    // Update field count and hide placeholder
                    updateFieldCountBadge();

                    // Add smooth scroll to new field
                    const newField = fieldsContainer.lastElementChild;
                    if (newField) {
                        newField.scrollIntoView({ behavior: 'smooth', block: 'center' });

                        // Add highlight effect
                        newField.classList.add('ring-2', 'ring-blue-500');
                        setTimeout(() => {
                            newField.classList.remove('ring-2', 'ring-blue-500');
                        }, 2000);

                        // Field added successfully - no toast needed until save
                    }
                })
                .catch(error => {
                    console.error('Error adding field:', error);

                    // Remove loading indicator
                    if (fieldsContainer.contains(loadingDiv)) {
                        fieldsContainer.removeChild(loadingDiv);
                    }

                    // Show error with SweetAlert2
                    SwalHelper.error(
                        'Field Eklenemedi',
                        'Field eklenirken bir hata oluştu. Lütfen tekrar deneyin.'
                    );
                });
        }

        function updateFieldIndices() {
            const fieldsContainer = document.getElementById('fieldsContainer');
            if (!fieldsContainer) return;

            const fieldCards = fieldsContainer.querySelectorAll('[data-field-index]');
            fieldCards.forEach((card, index) => {
                // Update data attribute
                card.setAttribute('data-field-index', index);

                // Update all form field names to use correct index
                const inputs = card.querySelectorAll('input, select, textarea');
                inputs.forEach(input => {
                    if (input.name && input.name.includes('Fields[')) {
                        // Replace old index with new index
                        input.name = input.name.replace(/Fields\[\d+\]/, `Fields[${index}]`);
                        input.id = input.id ? input.id.replace(/Fields_\d+_/, `Fields_${index}_`) : '';
                    }
                });

                // Update labels
                const labels = card.querySelectorAll('label[for]');
                labels.forEach(label => {
                    if (label.getAttribute('for') && label.getAttribute('for').includes('Fields_')) {
                        label.setAttribute('for', label.getAttribute('for').replace(/Fields_\d+_/, `Fields_${index}_`));
                    }
                });

                // Update validation spans
                const validationSpans = card.querySelectorAll('span[data-valmsg-for]');
                validationSpans.forEach(span => {
                    if (span.getAttribute('data-valmsg-for') && span.getAttribute('data-valmsg-for').includes('Fields[')) {
                        span.setAttribute('data-valmsg-for', span.getAttribute('data-valmsg-for').replace(/Fields\[\d+\]/, `Fields[${index}]`));
                    }
                });

                // Update translation tab IDs and onclick handlers
                const translationTabs = card.querySelectorAll('[class*="translation-tab-"]');
                translationTabs.forEach(tab => {
                    const onclickAttr = tab.getAttribute('onclick');
                    if (onclickAttr) {
                        tab.setAttribute('onclick', onclickAttr.replace(/switchTranslationTab\(\d+,/, `switchTranslationTab(${index},`));
                    }
                });

                // Update translation content IDs
                const translationContents = card.querySelectorAll('[id*="translationTab_"]');
                translationContents.forEach(content => {
                    const currentId = content.id;
                    const newId = currentId.replace(/translationTab_\d+_/, `translationTab_${index}_`);
                    content.id = newId;
                });

                // Update translation container IDs
                const translationContainer = card.querySelector('[id*="fieldTranslations_"]');
                if (translationContainer) {
                    translationContainer.id = `fieldTranslations_${index}`;
                }

                const translationTabsContent = card.querySelector('[id*="translationTabsContent_"]');
                if (translationTabsContent) {
                    translationTabsContent.id = `translationTabsContent_${index}`;
                }

                // Update checkbox onchange handler
                const translatableCheckbox = card.querySelector('[id*="__IsTranslatable"]');
                if (translatableCheckbox) {
                    translatableCheckbox.setAttribute('onchange', `toggleFieldTranslations(${index})`);
                }
            });
        }

        function removeFieldValue(index) {
            console.log('Remove field value functionality would be implemented here for index:', index);
        }



        // Update field count badge and no fields placeholder
        function updateFieldCountBadge() {
            const fieldsContainer = document.getElementById('fieldsContainer');
            const badge = document.querySelector('.bg-blue-100.text-blue-800');
            const noFieldsPlaceholder = document.getElementById('noFieldsPlaceholder');

            if (fieldsContainer) {
                const fieldCount = fieldsContainer.querySelectorAll('[data-field-index]').length;

                // Update badge
                if (badge) {
                    badge.textContent = `${fieldCount} field(s)`;
                }

                // Show/hide no fields placeholder
                if (noFieldsPlaceholder) {
                    if (fieldCount === 0) {
                        noFieldsPlaceholder.style.display = 'block';
                    } else {
                        noFieldsPlaceholder.style.display = 'none';
                    }
                }
            }
        }

        // Call updateFieldCountBadge when fields are added or removed
        const originalAddField = addField;
        addField = function() {
            originalAddField();
            setTimeout(updateFieldCountBadge, 100);
        };


    </script>
}
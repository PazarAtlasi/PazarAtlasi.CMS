@using System.Text.Json
@using PazarAtlasi.CMS.Application.Dtos
@model PazarAtlasi.CMS.Models.ViewModels.SectionItemsListViewModel

@{
    var config = Model.Configuration;
    var sectionConfig = config?.SectionConfiguration;
}

@if (sectionConfig != null && sectionConfig.SectionItems != null && sectionConfig.SectionItems.Any())
{
    <div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
        <h4 class="font-medium text-slate-800 mb-4 flex items-center">
            <i class="fas fa-@(sectionConfig.SectionUIConfiguration?.IconClass ?? "images") mr-2 text-blue-600"></i>
            Section Items
            <span id="itemsCountBadge" class="ml-2 px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
                @Model.SectionItems.Count item@(Model.SectionItems.Count != 1 ? "s" : "")
            </span>
            @if (sectionConfig.MinSectionItemCount > 0)
            {
                <span class="ml-2 text-xs text-slate-500">(Min: @sectionConfig.MinSectionItemCount)</span>
            }
            @if (sectionConfig.MaxSectionItemCount > 0)
            {
                <span class="ml-2 text-xs text-slate-500">(Max: @sectionConfig.MaxSectionItemCount)</span>
            }
        </h4>

        <!-- NEW: Render section items grouped by their configuration -->
        <div id="itemsGrid" class="@GetLayoutClass(sectionConfig.SectionUIConfiguration?.Layout, sectionConfig.SectionUIConfiguration?.Columns ?? 1)">
            @foreach (var item in Model.SectionItems)
            {
                <!-- Find the matching item configuration for this item's type -->
                var itemConfig = sectionConfig.SectionItems.FirstOrDefault(ic => ic.ItemType == item.Type);
                
                @if (itemConfig != null)
                {
                    <div class="section-item-card border border-slate-200 rounded-lg p-4 bg-white" data-item-id="@item.Id" data-item-type="@item.Type">
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center">
                                @if (itemConfig.UIConfiguration?.ShowReorder == true)
                                {
                                    <div class="drag-handle cursor-move mr-2 p-2 text-slate-400 hover:text-slate-600">
                                        <i class="fas fa-grip-vertical"></i>
                                    </div>
                                }
                                <span class="text-sm font-medium text-slate-700 item-number">
                                    @(itemConfig.Translations?.FirstOrDefault()?.Title ?? item.Type.ToString()) #@item.SortOrder
                                </span>
                            </div>
                            @if (itemConfig.AllowDynamicSectionItems)
                            {
                                <button type="button" onclick="SectionModal.removeSectionItem('@item.Id')"
                                        class="text-red-600 hover:text-red-800 text-sm">
                                    <i class="fas fa-trash"></i>
                                </button>
                            }
                        </div>

                        <!-- Render fields for this item -->
                        <div class="space-y-3">
                            @foreach (var field in itemConfig.Fields ?? new List<SectionItemFieldDto>())
                            {
                                ViewBag.Field = field;
                                ViewBag.Item = item;
                                ViewBag.Value = item.Data != null && item.Data.ContainsKey(field.FieldKey) == true ? item.Data[field.FieldKey]?.ToString() : field.DefaultValue ?? "";
                                ViewBag.AvailableLanguages = ViewBag.AvailableLanguages;

                                @await Html.PartialAsync("~/Views/Content/_SectionItemField.cshtml", field)
                            }

                            <!-- NEW: Recursively render nested items -->
                            @if (item.ChildItems?.Any() == true && itemConfig.SectionItems?.Any() == true)
                            {
                                @await Html.PartialAsync("~/Views/Content/_SectionItemNested.cshtml", new 
                                { 
                                    ParentItem = item, 
                                    NestedConfigs = itemConfig.SectionItems,
                                    Level = 1
                                })
                            }
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Add item buttons for each item configuration type -->
        @if (sectionConfig.AllowDynamicSectionItems)
        {
            <div class="mt-4 space-y-2">
                @foreach (var itemConfig in sectionConfig.SectionItems)
                {
                    var currentTypeCount = Model.SectionItems.Count(i => i.Type == itemConfig.ItemType);
                    var canAddMore = itemConfig.MaxItems == null || currentTypeCount < itemConfig.MaxItems;
                    
                    @if (canAddMore)
                    {
                        <button type="button" onclick="SectionModal.addSectionItemByType('@itemConfig.ItemType')"
                                class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
                            <i class="fas fa-plus mr-2"></i> @(itemConfig.UIConfiguration?.AddButtonText ?? $"Add {itemConfig.ItemType}")
                            @if (itemConfig.MaxItems != null)
                            {
                                <span class="ml-2 text-xs">(@currentTypeCount/@itemConfig.MaxItems)</span>
                            }
                        </button>
                    }
                }
            </div>
        }
    </div>

    <!-- Store template configuration for JavaScript -->
    <script type="application/json" id="templateConfiguration">
        @Html.Raw(System.Text.Json.JsonSerializer.Serialize(config, new JsonSerializerOptions 
        { 
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        }))
    </script>
}
else
{
    <div class="bg-slate-50 rounded-lg p-6 text-center text-slate-500">
        <i class="fas fa-info-circle text-2xl mb-2"></i>
        <p class="text-sm">Select a template to configure section items</p>
    </div>
}

@functions {
    string GetLayoutClass(string? layout, int columns = 1)
    {
        return layout?.ToLower() switch
        {
            "grid" => $"grid grid-cols-1 md:grid-cols-{columns} gap-4",
            "list" => "space-y-4",
            "carousel" => "grid grid-cols-1 md:grid-cols-3 gap-4",
            _ => "space-y-4"
        };
    }
}
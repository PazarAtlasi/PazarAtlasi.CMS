@model List<PazarAtlasi.CMS.Application.Dtos.SectionItemDto>

@{
    ViewData["Title"] = "Section Items";
    
    // Helper methods for styling based on level
    string GetItemBackgroundClass(int level)
    {
        return level switch
        {
            0 => "bg-blue-100",
            1 => "bg-green-100", 
            2 => "bg-yellow-100",
            _ => "bg-slate-100"
        };
    }
    
    string GetItemTextClass(int level)
    {
        return level switch
        {
            0 => "text-blue-600",
            1 => "text-green-600",
            2 => "text-yellow-600", 
            _ => "text-slate-600"
        };
    }
    
    string GetItemTitleClass(int level)
    {
        return level switch
        {
            0 => "text-slate-900",
            1 => "text-slate-800",
            2 => "text-slate-700",
            _ => "text-slate-600"
        };
    }
}

<div class="section-items-management">
    <div class="flex flex-wrap items-center mb-8">
        <div class="w-full lg:w-2/3 mb-4 lg:mb-0">
            <div class="page-title-box">
                <h4 class="text-2xl font-bold text-slate-800 relative inline-block after:content-[''] after:absolute after:bottom-[-8px] after:left-0 after:w-10 after:h-[3px] after:bg-blue-800 after:rounded-full">
                    Section Items Management
                </h4>
                <p class="text-slate-500 mt-3 max-w-xl">
                    Manage your section items, view details and monitor their status.
                </p>
            </div>
        </div>
        <div class="w-full lg:w-1/3 text-right">
            <a href="@Url.Action("SectionItemForm", "Content")" 
               class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200">
                <i class="fas fa-plus mr-2"></i>
                Yeni Section Item
            </a>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-blue-100 rounded-full">
                    <i class="fas fa-list-ul text-blue-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Total Items</p>
                    <p class="text-2xl font-bold text-slate-800">@Model.Count</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-green-100 rounded-full">
                    <i class="fas fa-layer-group text-green-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">With Template</p>
                    <p class="text-2xl font-bold text-slate-800">@Model.Count(s => s.TemplateId.HasValue)</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-yellow-100 rounded-full">
                    <i class="fas fa-sitemap text-yellow-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Nested Items</p>
                    <p class="text-2xl font-bold text-slate-800">@Model.Count(s => s.ParentSectionItemId.HasValue)</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-purple-100 rounded-full">
                    <i class="fas fa-language text-purple-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Languages</p>
                    <p class="text-2xl font-bold text-slate-800">@Model.SelectMany(s => s.Translations).Select(t => t.LanguageId).Distinct().Count()</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Section Items Table -->
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="px-6 py-4 border-b border-slate-200">
            <h5 class="text-lg font-semibold text-slate-800">Section Items</h5>
        </div>
        
        @if (Model.Any())
        {
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-slate-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Item</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Type</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Template</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Parent</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Sort Order</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Translations</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Fields</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-slate-200">
                        @foreach (var item in Model)
                        {
                            <tr class="hover:bg-slate-50 @(item.Level > 0 ? "bg-slate-50" : "") section-item-row" 
                                data-item-id="@item.Id" 
                                data-level="@item.Level" 
                                data-parent-id="@(item.ParentSectionItemId?.ToString() ?? "")"
                                style="@(item.Level > 0 ? "display: none;" : "")">
                                <td class="px-6 py-4 whitespace-nowrap" style="padding-left: @(24 + (item.Level * 24))px;">
                                    <div class="flex items-center">
                                        @if (item.Level > 0)
                                        {
                                            <div class="flex items-center mr-3">
                                                @for (int i = 0; i < item.Level; i++)
                                                {
                                                    <div class="w-4 h-px bg-slate-300 mr-1"></div>
                                                }
                                                <i class="fas fa-level-down-alt text-slate-400 text-xs mr-2"></i>
                                            </div>
                                        }
                                        
                                        @if (item.HasChildren)
                                        {
                                            <button type="button" 
                                                    class="toggle-children mr-2 p-1 hover:bg-slate-200 rounded transition-colors"
                                                    data-item-id="@item.Id"
                                                    title="Toggle children">
                                                <i class="fas fa-chevron-right text-slate-500 text-xs transform transition-transform duration-200"></i>
                                            </button>
                                        }
                                        else if (item.Level > 0)
                                        {
                                            <div class="w-6 mr-2"></div>
                                        }
                                        
                                        <div class="flex-shrink-0 h-10 w-10">
                                            <div class="h-10 w-10 rounded-full @(GetItemBackgroundClass(item.Level)) flex items-center justify-center">
                                                @if (!string.IsNullOrEmpty(item.IconClass))
                                                {
                                                    <i class="@item.IconClass @(GetItemTextClass(item.Level))"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-list-ul @(GetItemTextClass(item.Level))"></i>
                                                }
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium @(GetItemTitleClass(item.Level))">
                                                @(item.Title ?? "No Title")
                                                @if (item.Level > 0)
                                                {
                                                    <span class="ml-2 text-xs text-slate-500">(Level @item.Level)</span>
                                                }
                                                @if (item.HasChildren)
                                                {
                                                    <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                        @item.Children.Count child@(item.Children.Count != 1 ? "ren" : "")
                                                    </span>
                                                }
                                            </div>
                                            <div class="text-sm text-slate-500">
                                                @if (!string.IsNullOrEmpty(item.Key))
                                                {
                                                    <span>Key: @item.Key</span>
                                                }
                                                else
                                                {
                                                    <span>ID: @item.Id</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex flex-col space-y-1">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(item.Level > 0 ? "bg-slate-100 text-slate-700" : "bg-blue-100 text-blue-800")">
                                            @item.Type
                                        </span>
                                        <span class="text-xs @(GetItemTextClass(item.Level).Replace("text-", "text-").Replace("-600", "-500"))">@item.MediaType</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (item.TemplateId.HasValue)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(item.Level > 0 ? "bg-slate-100 text-slate-700" : "bg-green-100 text-green-800")">
                                            @item.TemplateName
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-sm @(item.Level > 0 ? "text-slate-400" : "text-slate-500")">No Template</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (item.Level > 0)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-slate-100 text-slate-700">
                                            <i class="fas fa-level-down-alt mr-1"></i>
                                            Level @item.Level
                                        </span>
                                    }
                                    else if (item.HasChildren)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                            <i class="fas fa-sitemap mr-1"></i>
                                            Parent
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-sm text-slate-500">Root Item</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm @(GetItemTitleClass(item.Level))">
                                    @item.SortOrder
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex flex-wrap gap-1">
                                        @foreach (var translation in item.Translations.Take(3))
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @(item.Level > 0 ? "bg-slate-200 text-slate-600" : "bg-slate-100 text-slate-800")" 
                                                  title="@translation.LanguageName">
                                                @translation.LanguageCode
                                            </span>
                                        }
                                        @if (item.Translations.Count > 3)
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @(item.Level > 0 ? "bg-slate-300 text-slate-500" : "bg-slate-200 text-slate-600")">
                                                +@(item.Translations.Count - 3)
                                            </span>
                                        }
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex flex-col space-y-1">
                                        <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium @(item.Level > 0 ? "bg-slate-100 text-slate-600 border-slate-200" : "bg-indigo-50 text-indigo-700 border-indigo-200") border">
                                            @item.Fields.Count Fields
                                        </span>
                                        @if (item.FieldValues.Any())
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium @(item.Level > 0 ? "bg-slate-100 text-slate-600 border-slate-200" : "bg-green-50 text-green-700 border-green-200") border">
                                                @item.FieldValues.Count Values
                                            </span>
                                        }
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex items-center space-x-2">
                                        <a href="@Url.Action("SectionItemForm", "Content", new { id = item.Id })" 
                                           class="@(item.Level > 0 ? "text-slate-500 hover:text-slate-700" : "text-blue-600 hover:text-blue-900") transition-colors" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button type="button" 
                                                onclick="viewSectionItem(@item.Id)" 
                                                class="@(item.Level > 0 ? "text-slate-400 hover:text-slate-600" : "text-slate-600 hover:text-slate-900") transition-colors" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <div class="mx-auto h-12 w-12 text-slate-400">
                    <i class="fas fa-list-ul text-4xl"></i>
                </div>
                <h3 class="mt-2 text-sm font-medium text-slate-900">No section items found</h3>
                <p class="mt-1 text-sm text-slate-500">Get started by creating a new section item.</p>
                <div class="mt-6">
                    <a href="@Url.Action("SectionItemForm", "Content")" 
                       class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200">
                        <i class="fas fa-plus mr-2"></i>
                        Create First Section Item
                    </a>
                </div>
            </div>
        }
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="fixed top-4 right-4 z-50">
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg shadow-lg">
            <div class="flex items-center">
                <i class="fas fa-check-circle mr-2"></i>
                @TempData["SuccessMessage"]
            </div>
        </div>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="fixed top-4 right-4 z-50">
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg shadow-lg">
            <div class="flex items-center">
                <i class="fas fa-exclamation-circle mr-2"></i>
                @TempData["ErrorMessage"]
            </div>
        </div>
    </div>
}

<!-- Section Item Details Modal -->
<div id="sectionItemModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="sectionItemModalLabel" aria-hidden="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <!-- Background overlay -->
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" onclick="closeModal()"></div>

        <!-- Modal panel -->
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="sectionItemModalLabel">
                                Section Item Details
                            </h3>
                            <button type="button" onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                        <div id="sectionItemModalBody" class="mt-2">
                            <!-- Content will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" onclick="closeModal()" 
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-600 text-base font-medium text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 sm:ml-3 sm:w-auto sm:text-sm">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tree view toggle functionality
            const toggleButtons = document.querySelectorAll('.toggle-children');
            
            toggleButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    const icon = this.querySelector('i');
                    const isExpanded = icon.classList.contains('rotate-90');
                    
                    if (isExpanded) {
                        // Collapse children
                        collapseChildren(itemId);
                        icon.classList.remove('rotate-90');
                    } else {
                        // Expand children
                        expandChildren(itemId);
                        icon.classList.add('rotate-90');
                    }
                });
            });
            
            // Add expand/collapse all buttons
            addExpandCollapseButtons();
        });
        
        function expandChildren(parentId) {
            const childRows = document.querySelectorAll(`tr[data-parent-id="${parentId}"]`);
            childRows.forEach(row => {
                row.style.display = '';
                
                // If this child has children and is expanded, show its children too
                const childId = row.getAttribute('data-item-id');
                const toggleButton = row.querySelector('.toggle-children');
                if (toggleButton) {
                    const icon = toggleButton.querySelector('i');
                    if (icon.classList.contains('rotate-90')) {
                        expandChildren(childId);
                    }
                }
            });
        }
        
        function collapseChildren(parentId) {
            const childRows = document.querySelectorAll(`tr[data-parent-id="${parentId}"]`);
            childRows.forEach(row => {
                row.style.display = 'none';
                
                // Also collapse any grandchildren
                const childId = row.getAttribute('data-item-id');
                collapseChildren(childId);
                
                // Reset toggle button state
                const toggleButton = row.querySelector('.toggle-children');
                if (toggleButton) {
                    const icon = toggleButton.querySelector('i');
                    icon.classList.remove('rotate-90');
                }
            });
        }
        
        function expandAll() {
            const allRows = document.querySelectorAll('.section-item-row');
            const allToggleButtons = document.querySelectorAll('.toggle-children');
            
            allRows.forEach(row => {
                row.style.display = '';
            });
            
            allToggleButtons.forEach(button => {
                const icon = button.querySelector('i');
                icon.classList.add('rotate-90');
            });
        }
        
        function collapseAll() {
            const childRows = document.querySelectorAll('.section-item-row[data-level]:not([data-level="0"])');
            const allToggleButtons = document.querySelectorAll('.toggle-children');
            
            childRows.forEach(row => {
                row.style.display = 'none';
            });
            
            allToggleButtons.forEach(button => {
                const icon = button.querySelector('i');
                icon.classList.remove('rotate-90');
            });
        }
        
        function addExpandCollapseButtons() {
            const tableHeader = document.querySelector('.bg-white.rounded-xl.shadow-md .px-6.py-4.border-b');
            if (tableHeader) {
                const buttonContainer = document.createElement('div');
                buttonContainer.className = 'flex items-center space-x-2 mt-2';
                buttonContainer.innerHTML = `
                    <button onclick="expandAll()" class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        <i class="fas fa-expand-arrows-alt mr-1"></i>
                        Expand All
                    </button>
                    <button onclick="collapseAll()" class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        <i class="fas fa-compress-arrows-alt mr-1"></i>
                        Collapse All
                    </button>
                `;
                tableHeader.appendChild(buttonContainer);
            }
        }

        function viewSectionItem(id) {
            // This would typically make an AJAX call to get detailed information
            // For now, we'll just show a placeholder
            document.getElementById('sectionItemModalBody').innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-spinner fa-spin text-4xl text-blue-600 mb-4"></i>
                    <p class="text-gray-600">Loading section item details...</p>
                </div>
            `;
            document.getElementById('sectionItemModal').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('sectionItemModal').classList.add('hidden');
        }

        // Close modal when clicking outside
        document.getElementById('sectionItemModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });
    </script>
}

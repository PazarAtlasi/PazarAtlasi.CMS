@model PazarAtlasi.CMS.Models.ViewModels.LayoutViewModel
@{
    ViewData["Title"] = $"Layout Details - {Model.Name}";
}

<div class="layout-details">
    <!-- Header -->
    <div class="flex flex-wrap items-center mb-8">
        <div class="w-full lg:w-2/3 mb-4 lg:mb-0">
            <div class="page-title-box">
                <div class="flex items-center mb-2">
                    <a href="@Url.Action("Layouts", "Content")" 
                       class="text-purple-600 hover:text-purple-800 mr-3">
                        <i class="fas fa-arrow-left"></i>
                    </a>
                    <h4 class="text-2xl font-bold text-slate-800 relative inline-block after:content-[''] after:absolute after:bottom-[-8px] after:left-0 after:w-10 after:h-[3px] after:bg-purple-800 after:rounded-full">
                        @Model.Name
                        @if (Model.IsDefault)
                        {
                            <span class="ml-3 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                <i class="fas fa-star mr-1"></i> Default Layout
                            </span>
                        }
                    </h4>
                    @{
                        var css = "";
                        switch (Model.Status)
                        {
                            case PazarAtlasi.CMS.Domain.Common.Status.Active:
                                css = "bg-green-100 text-green-800";
                                break;
                            case PazarAtlasi.CMS.Domain.Common.Status.Pending:
                                css = "bg-blue-100 text-blue-800";
                                break;
                            case PazarAtlasi.CMS.Domain.Common.Status.Draft:
                                css = "bg-yellow-100 text-yellow-800";
                                break;
                            case PazarAtlasi.CMS.Domain.Common.Status.Archived:
                                css = "bg-gray-100 text-gray-800";
                                break;
                            default:
                                css = "bg-red-100 text-red-800";
                                break;
                        }

                        <span class="ml-4 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(css)">
                            @Model.Status.ToString()
                        </span>
                    }
                </div>
                <p class="text-slate-500 mt-3 max-w-xl">
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        @Model.Description
                    }
                    else
                    {
                        <span>Layout with @Model.LayoutSections.Count sections</span>
                    }
                </p>
            </div>
        </div>
        <div class="w-full lg:w-1/3 text-left lg:text-right">
            <div class="inline-flex items-center space-x-2">
                <button onclick="editLayout(@Model.Id)" class="py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors inline-flex items-center shadow-sm">
                    <i class="fas fa-edit mr-2"></i> Edit Layout
                </button>
                <button onclick="duplicateLayout(@Model.Id)" class="py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors inline-flex items-center shadow-sm">
                    <i class="fas fa-copy mr-2"></i> Duplicate
                </button>
            </div>
        </div>
    </div>

    <!-- Layout Info Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-purple-100 rounded-full">
                    <i class="fas fa-th-large text-purple-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Layout Type</p>
                    <p class="text-lg font-bold text-slate-800">@(Model.IsDefault ? "Default" : "Custom")</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-blue-100 rounded-full">
                    <i class="fas fa-layer-group text-blue-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Sections</p>
                    <p class="text-lg font-bold text-slate-800">@Model.LayoutSections.Count</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-green-100 rounded-full">
                    <i class="fas fa-file-alt text-green-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Pages Using</p>
                    <p class="text-lg font-bold text-slate-800">0</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-yellow-100 rounded-full">
                    <i class="fas fa-calendar text-yellow-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Created</p>
                    <p class="text-lg font-bold text-slate-800">@Model.CreatedAt.ToString("dd/MM/yyyy")</p>
                </div>
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Sidebar -->
        <div class="space-y-6 lg:sticky lg:top-6 lg:self-start">
            <!-- Layout Information -->
            <div class="bg-white rounded-xl shadow-md">
                <div class="p-6 border-b border-slate-100">
                    <h5 class="text-lg font-semibold text-slate-800 flex items-center">
                        <i class="fas fa-info-circle mr-2 text-purple-600"></i>
                        Layout Information
                    </h5>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-slate-700 mb-1">Layout ID</label>
                        <p class="text-sm text-slate-600">#@Model.Id</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-slate-700 mb-1">Status</label>
                        <p class="text-sm text-slate-600">@Model.Status.ToString()</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-slate-700 mb-1">Default Layout</label>
                        <p class="text-sm text-slate-600">@(Model.IsDefault ? "Yes" : "No")</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-slate-700 mb-1">Created At</label>
                        <p class="text-sm text-slate-600">@Model.CreatedAt.ToString("dd MMMM yyyy, HH:mm")</p>
                    </div>
                    @if (Model.UpdatedAt.HasValue)
                    {
                        <div>
                            <label class="block text-sm font-medium text-slate-700 mb-1">Last Updated</label>
                            <p class="text-sm text-slate-600">@Model.UpdatedAt.Value.ToString("dd MMMM yyyy, HH:mm")</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-white rounded-xl shadow-md">
                <div class="p-6 border-b border-slate-100">
                    <h5 class="text-lg font-semibold text-slate-800 flex items-center">
                        <i class="fas fa-bolt mr-2 text-purple-600"></i>
                        Quick Actions
                    </h5>
                </div>
                <div class="p-6 space-y-3">
                    <button onclick="editLayout(@Model.Id)" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors inline-flex items-center justify-center">
                        <i class="fas fa-edit mr-2"></i> Edit Layout
                    </button>
                    <button onclick="duplicateLayout(@Model.Id)" class="w-full py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors inline-flex items-center justify-center">
                        <i class="fas fa-copy mr-2"></i> Duplicate Layout
                    </button>
                    <button onclick="previewLayout(@Model.Id)" class="w-full py-2 px-4 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors inline-flex items-center justify-center">
                        <i class="fas fa-eye mr-2"></i> Preview Layout
                    </button>
                    <hr class="my-3">
                    <button onclick="deleteLayout(@Model.Id, '@Model.Name')" class="w-full py-2 px-4 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm transition-colors inline-flex items-center justify-center">
                        <i class="fas fa-trash mr-2"></i> Delete Layout
                    </button>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="lg:col-span-2 space-y-6">
            <!-- Layout Structure -->
            <div class="bg-white rounded-xl shadow-md">
                <div class="p-6 border-b border-slate-100">
                    <h5 class="text-lg font-semibold text-slate-800 flex items-center">
                        <i class="fas fa-sitemap mr-2 text-purple-600"></i>
                        Layout Structure (@Model.LayoutSections.Count sections)
                    </h5>
                </div>
                <div class="p-6">
                    @if (Model.LayoutSections.Any())
                    {
                        <div class="space-y-4">
                            @foreach (var layoutSection in Model.LayoutSections.OrderBy(ls => ls.SortOrder))
                            {
                                <div class="border border-slate-200 rounded-lg p-4 hover:border-purple-300 transition-colors">
                                    <div class="flex items-center justify-between mb-3">
                                        <div class="flex items-center">
                                            <span class="inline-flex items-center justify-center w-8 h-8 bg-purple-100 text-purple-600 rounded-full text-sm font-medium mr-3">
                                                @layoutSection.SortOrder
                                            </span>
                                            <div>
                                                <p class="text-sm font-medium text-slate-900">@layoutSection.SectionName</p>
                                                <p class="text-xs text-slate-500">@layoutSection.SectionType.ToString() - Position: @layoutSection.Position</p>
                                            </div>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            @if (layoutSection.IsRequired)
                                            {
                                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                                    <i class="fas fa-exclamation-circle mr-1"></i> Required
                                                </span>
                                            }
                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                                                @layoutSection.Position
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <!-- Layout Preview -->
                        <div class="mt-8 p-6 bg-slate-50 rounded-lg">
                            <h6 class="text-sm font-medium text-slate-700 mb-4">Layout Preview</h6>
                            <div class="space-y-2">
                                @foreach (var group in Model.LayoutSections.GroupBy(ls => ls.Position).OrderBy(g => g.Key))
                                {
                                    <div class="bg-white border-2 border-dashed border-slate-300 rounded-lg p-3">
                                        <div class="flex items-center justify-between mb-2">
                                            <span class="text-xs font-medium text-slate-600 uppercase">@group.Key</span>
                                            <span class="text-xs text-slate-500">@group.Count() section(s)</span>
                                        </div>
                                        <div class="space-y-1">
                                            @foreach (var layoutSection in group.OrderBy(s => s.SortOrder))
                                            {
                                                <div class="bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs">
                                                    @layoutSection.SectionName
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8 text-slate-400">
                            <i class="fas fa-sitemap text-4xl mb-4"></i>
                            <p class="text-lg font-medium">No sections in this layout</p>
                            <p class="text-sm">Add sections to define the structure of this layout.</p>
                            <button onclick="editLayout(@Model.Id)" class="mt-4 py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors inline-flex items-center">
                                <i class="fas fa-plus mr-2"></i> Add Sections
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- Usage Information -->
            <div class="bg-white rounded-xl shadow-md">
                <div class="p-6 border-b border-slate-100">
                    <h5 class="text-lg font-semibold text-slate-800 flex items-center">
                        <i class="fas fa-chart-bar mr-2 text-purple-600"></i>
                        Usage Information
                    </h5>
                </div>
                <div class="p-6">
                    <div class="text-center py-8 text-slate-400">
                        <i class="fas fa-file-alt text-4xl mb-4"></i>
                        <p class="text-lg font-medium">No pages using this layout yet</p>
                        <p class="text-sm">When pages use this layout, they will appear here.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function editLayout(layoutId) {
        // For now, redirect to create layout page with edit mode
        console.log('Edit layout:', layoutId);
        alert('Edit functionality will be implemented.');
    }

    function duplicateLayout(layoutId) {
        if (confirm('Are you sure you want to duplicate this layout?')) {
            console.log('Duplicate layout:', layoutId);
            alert('Duplicate functionality will be implemented.');
        }
    }

    function previewLayout(layoutId) {
        console.log('Preview layout:', layoutId);
        alert('Preview functionality will be implemented.');
    }

    async function deleteLayout(layoutId, layoutName) {
        if (confirm(`Are you sure you want to delete the layout "${layoutName}"? This action cannot be undone.`)) {
            try {
                const response = await fetch('/Content/DeleteLayout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: new URLSearchParams({ id: layoutId })
                });

                const result = await response.json();

                if (result.success) {
                    window.location.href = '/Content/Layouts';
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('An error occurred while deleting the layout.');
            }
        }
    }
</script>

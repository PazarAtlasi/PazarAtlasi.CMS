@model PazarAtlasi.CMS.Models.ViewModels.TemplateEditViewModel
@{
    ViewData["Title"] = "Edit Template";
}

<div class="template-edit">
    <div class="flex flex-wrap items-center mb-8">
        <div class="w-full lg:w-2/3 mb-4 lg:mb-0">
            <div class="page-title-box">
                <h4 class="text-2xl font-bold text-slate-800 inline-block after:content-[''] after:absolute after:bottom-[-8px] after:left-0 after:w-10 after:h-[3px] after:bg-purple-800 after:rounded-full">
                    Edit Template
                </h4>
                <p class="text-slate-500 mt-3 max-w-xl">
                    Update template information and translations.
                </p>
            </div>
        </div>
        <div class="w-full lg:w-1/3 text-left lg:text-right">
            <div class="inline-flex items-center space-x-2">
                <a href="@Url.Action("Template", "Content")" class="py-2 px-4 bg-slate-200 hover:bg-slate-300 text-slate-700 rounded-lg text-sm transition-colors inline-flex items-center">
                    <i class="fas fa-arrow-left mr-2"></i> Back to Templates
                </a>
            </div>
        </div>
    </div>

    <!-- Template Info Card -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-6">
        <div class="flex items-center justify-between mb-4">
            <h5 class="text-lg font-semibold text-slate-800 flex items-center">
                <i class="fas fa-info-circle mr-2 text-blue-600"></i> Template Information
            </h5>
            <div class="flex items-center space-x-2 text-sm text-slate-500">
                <span>Created: @Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                @if (Model.UpdatedAt.HasValue)
                {
                    <span>•</span>
                    <span>Updated: @Model.UpdatedAt.Value.ToString("dd/MM/yyyy HH:mm")</span>
                }
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
                <span class="font-medium text-slate-700">Template ID:</span>
                <span class="text-slate-600">#@Model.Id</span>
            </div>
            <div>
                <span class="font-medium text-slate-700">Current Key:</span>
                <span class="text-slate-600 font-mono">@Model.TemplateKey</span>
            </div>
        </div>
    </div>

    <form asp-action="TemplateEdit" method="post" class="space-y-6">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="CreatedAt" />
        <input type="hidden" asp-for="UpdatedAt" />
        
        <!-- Template Basic Information -->
        <div class="bg-white rounded-xl shadow-md p-6">
            <h5 class="text-lg font-semibold text-slate-800 mb-4 flex items-center">
                <i class="fas fa-cog mr-2 text-purple-600"></i> Template Settings
            </h5>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label asp-for="TemplateKey" class="block text-sm font-medium text-slate-700 mb-2">Template Key *</label>
                    <input asp-for="TemplateKey" 
                           class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400"
                           placeholder="e.g., hero-card, navbar-menu" />
                    <span asp-validation-for="TemplateKey" class="text-red-500 text-sm"></span>
                    <p class="text-xs text-slate-500 mt-1">Unique identifier for this template (lowercase, hyphens allowed)</p>
                </div>

                <div>
                    <label asp-for="SortOrder" class="block text-sm font-medium text-slate-700 mb-2">Sort Order</label>
                    <input asp-for="SortOrder" type="number" min="0" 
                           class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400"
                           placeholder="0" />
                    <span asp-validation-for="SortOrder" class="text-red-500 text-sm"></span>
                </div>

                <div class="flex items-center">
                    <div class="flex items-center h-5">
                        <input asp-for="IsActive" type="checkbox" 
                               class="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 focus:ring-2" />
                    </div>
                    <div class="ml-3 text-sm">
                        <label asp-for="IsActive" class="font-medium text-slate-700">Active Template</label>
                        <p class="text-slate-500">Template will be available for use in sections</p>
                    </div>
                </div>
            </div>

            <div class="mt-6">
                <label asp-for="ConfigurationSchema" class="block text-sm font-medium text-slate-700 mb-2">Configuration Schema (JSON)</label>
                <textarea asp-for="ConfigurationSchema" rows="6"
                          class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400 font-mono"
                          placeholder='{"fields": [{"key": "title", "type": "text", "required": true}]}'></textarea>
                <span asp-validation-for="ConfigurationSchema" class="text-red-500 text-sm"></span>
                <p class="text-xs text-slate-500 mt-1">JSON schema defining the template structure and fields</p>
            </div>
        </div>

        <!-- Template Translations -->
        <div class="bg-white rounded-xl shadow-md p-6">
            <h5 class="text-lg font-semibold text-slate-800 mb-4 flex items-center">
                <i class="fas fa-language mr-2 text-green-600"></i> Template Translations
            </h5>

            <!-- Language Tabs -->
            <div class="flex space-x-1 mb-6 bg-slate-50 rounded-lg p-1 border border-slate-200">
                @for (int i = 0; i < Model.AvailableLanguages.Count; i++)
                {
                    var lang = Model.AvailableLanguages[i];
                    <button type="button"
                            class="language-tab flex-1 px-3 py-2 text-sm font-medium rounded-md transition-colors @(i == 0 || lang.IsDefault ? "bg-green-100 text-green-800" : "text-slate-600 hover:text-slate-800 hover:bg-slate-100")"
                            data-language-id="@lang.Id" 
                            onclick="switchLanguageTab(@lang.Id)">
                        @lang.Code.ToUpper()
                        @if (lang.IsDefault)
                        {
                            <span class="ml-1 text-xs">●</span>
                        }
                        @{
                            var hasTranslation = Model.Translations.Any(t => t.LanguageId == lang.Id && !string.IsNullOrWhiteSpace(t.Name));
                        }
                        @if (hasTranslation)
                        {
                            <span class="ml-1 text-xs text-green-600">✓</span>
                        }
                    </button>
                }
            </div>

            <!-- Translation Content -->
            <div id="translationsContainer">
                @for (int i = 0; i < Model.Translations.Count; i++)
                {
                    var translation = Model.Translations[i];
                    var language = Model.AvailableLanguages.FirstOrDefault(l => l.Id == translation.LanguageId);
                    
                    <div class="translation-content @(i == 0 || (language?.IsDefault ?? false) ? "" : "hidden")" 
                         data-language-id="@translation.LanguageId">
                        
                        <input type="hidden" asp-for="Translations[i].Id" />
                        <input type="hidden" asp-for="Translations[i].TemplateId" />
                        <input type="hidden" asp-for="Translations[i].LanguageId" />
                        
                        <div class="bg-slate-50 rounded-lg p-4 border border-slate-200">
                            <div class="flex items-center mb-4">
                                <i class="fas fa-flag mr-2 text-green-600"></i>
                                <span class="font-medium text-slate-700">@language?.Name (@language?.Code)</span>
                                @if (language?.IsDefault ?? false)
                                {
                                    <span class="ml-2 px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded">Default</span>
                                }
                                @if (!string.IsNullOrWhiteSpace(translation.Name))
                                {
                                    <span class="ml-2 px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
                                        <i class="fas fa-check mr-1"></i> Translated
                                    </span>
                                }
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-slate-700 mb-1">Template Name *</label>
                                    <input asp-for="Translations[i].Name" 
                                           class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-200 focus:border-green-400"
                                           placeholder="Enter template name" />
                                    <span asp-validation-for="Translations[i].Name" class="text-red-500 text-sm"></span>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-slate-700 mb-1">Description</label>
                                    <textarea asp-for="Translations[i].Description" rows="2"
                                              class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-200 focus:border-green-400"
                                              placeholder="Enter template description"></textarea>
                                    <span asp-validation-for="Translations[i].Description" class="text-red-500 text-sm"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex items-center justify-end space-x-3 pt-4">
            <a href="@Url.Action("Template", "Content")" 
               class="py-2 px-4 bg-slate-200 hover:bg-slate-300 text-slate-700 rounded-lg text-sm transition-colors">
                <i class="fas fa-times mr-2"></i> Cancel
            </a>
            <button type="submit" 
                    class="py-2 px-4 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors">
                <i class="fas fa-save mr-2"></i> Update Template
            </button>
        </div>
    </form>
</div>

<script>
    function switchLanguageTab(languageId) {
        // Update active tab
        document.querySelectorAll('.language-tab').forEach(tab => {
            tab.classList.remove('bg-green-100', 'text-green-800');
            tab.classList.add('text-slate-600', 'hover:text-slate-800', 'hover:bg-slate-100');
        });
        
        const activeTab = document.querySelector(`[data-language-id="${languageId}"]`);
        if (activeTab && activeTab.classList.contains('language-tab')) {
            activeTab.classList.remove('text-slate-600', 'hover:text-slate-800', 'hover:bg-slate-100');
            activeTab.classList.add('bg-green-100', 'text-green-800');
        }

        // Show/hide translation content
        document.querySelectorAll('.translation-content').forEach(content => {
            if (content.dataset.languageId === languageId.toString()) {
                content.classList.remove('hidden');
            } else {
                content.classList.add('hidden');
            }
        });
    }

    // Initialize first tab as active
    document.addEventListener('DOMContentLoaded', function() {
        const firstTab = document.querySelector('.language-tab');
        if (firstTab) {
            const languageId = firstTab.dataset.languageId;
            switchLanguageTab(parseInt(languageId));
        }
    });

    // JSON validation for configuration schema
    document.querySelector('textarea[name="ConfigurationSchema"]').addEventListener('blur', function() {
        const value = this.value.trim();
        if (value && value !== '') {
            try {
                JSON.parse(value);
                this.classList.remove('border-red-300');
                this.classList.add('border-slate-300');
            } catch (e) {
                this.classList.remove('border-slate-300');
                this.classList.add('border-red-300');
            }
        }
    });
</script>

<style>
    .language-tab.active {
        background-color: #dcfce7 !important;
        color: #166534 !important;
    }

    .translation-content {
        transition: opacity 0.2s ease-in-out;
    }

    .translation-content.hidden {
        display: none;
    }
</style>
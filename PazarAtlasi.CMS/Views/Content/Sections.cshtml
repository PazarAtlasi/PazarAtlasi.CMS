@model PazarAtlasi.CMS.Models.ViewModels.SectionListResponse
@{
    ViewData["Title"] = "Sections Management";
}

<div class="sections-page">
    <!-- Header -->
    <div class="flex flex-wrap items-center justify-between mb-8">
        <div class="w-full lg:w-2/3 mb-4 lg:mb-0">
            <div class="page-title-box">
                <h4 class="text-2xl font-bold text-slate-800 relative inline-block after:content-[''] after:absolute after:bottom-[-8px] after:left-0 after:w-10 after:h-[3px] after:bg-purple-800 after:rounded-full">
                    Sections Management
                </h4>
                <p class="text-slate-500 mt-3 max-w-xl">
                    Manage reusable sections and components for your pages. Create once, use everywhere.
                </p>
            </div>
        </div>
        <div class="w-full lg:w-1/3 text-left lg:text-right">
            <div class="inline-flex items-center space-x-2">
                <button type="button" onclick="openCreateSectionModal()" class="py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors inline-flex items-center shadow-sm">
                    <i class="fas fa-plus mr-2"></i> Create Section
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-purple-100 rounded-full">
                    <i class="fas fa-layer-group text-purple-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Total Sections</p>
                    <p class="text-lg font-bold text-slate-800">@Model.TotalCount</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-green-100 rounded-full">
                    <i class="fas fa-recycle text-green-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Reusable</p>
                    <p class="text-lg font-bold text-slate-800">@Model.Sections.Count(s => s.IsReusable)</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-blue-100 rounded-full">
                    <i class="fas fa-check-circle text-blue-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Active</p>
                    <p class="text-lg font-bold text-slate-800">@Model.Sections.Count(s => s.Status == PazarAtlasi.CMS.Domain.Common.Status.Active)</p>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-xl shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 bg-yellow-100 rounded-full">
                    <i class="fas fa-edit text-yellow-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-slate-600">Draft</p>
                    <p class="text-lg font-bold text-slate-800">@Model.Sections.Count(s => s.Status == PazarAtlasi.CMS.Domain.Common.Status.Draft)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Sections List -->
    <div class="bg-white rounded-xl shadow-md">
        <div class="p-6 border-b border-slate-100">
            <div class="flex items-center justify-between">
                <h5 class="text-lg font-semibold text-slate-800 flex items-center">
                    <i class="fas fa-list mr-2 text-purple-600"></i>
                    All Sections (@Model.TotalCount)
                </h5>
                <div class="flex items-center space-x-2">
                    <div class="relative">
                        <input type="text" placeholder="Search sections..." 
                               class="pl-10 pr-4 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400">
                        <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 text-sm"></i>
                    </div>
                    <select class="px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400">
                        <option value="">All Types</option>
                        @foreach (var sectionType in Enum.GetValues<PazarAtlasi.CMS.Domain.Common.SectionType>())
                        {
                            <option value="@sectionType">@sectionType.ToString()</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="overflow-x-auto">
            @if (Model.Sections.Any())
            {
                <table class="w-full">
                    <thead class="bg-slate-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Section</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Type</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Template</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Items</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Usage</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Created</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-slate-200">
                        @foreach (var sectionDetail in Model.Sections)
                        {
                            <tr class="hover:bg-slate-50 transition-colors">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                                            <i class="fas fa-layer-group text-purple-600"></i>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-slate-900">
                                                @sectionDetail.Name
                                                @if (sectionDetail.IsReusable)
                                                {
                                                    <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                                        <i class="fas fa-recycle mr-1"></i> Reusable
                                                    </span>
                                                }
                                            </div>
                                            @if (!string.IsNullOrEmpty(sectionDetail.PageName))
                                            {
                                                <div class="text-sm text-slate-500">
                                                    Used in: <a href="@Url.Action("PageDetails", "Content", new { id = sectionDetail.PageId })" class="text-purple-600 hover:text-purple-800">@sectionDetail.PageName</a>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        @sectionDetail.Type.ToString()
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="text-sm text-slate-900">Template System</span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @{
                                        var statusClass = sectionDetail.Status switch
                                        {
                                            PazarAtlasi.CMS.Domain.Common.Status.Active => "bg-green-100 text-green-800",
                                            PazarAtlasi.CMS.Domain.Common.Status.Draft => "bg-yellow-100 text-yellow-800",
                                            PazarAtlasi.CMS.Domain.Common.Status.Pending => "bg-blue-100 text-blue-800",
                                            PazarAtlasi.CMS.Domain.Common.Status.Archived => "bg-gray-100 text-gray-800",
                                            _ => "bg-red-100 text-red-800"
                                        };
                                    }
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @statusClass">
                                        @sectionDetail.Status.ToString()
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <i class="fas fa-images text-slate-400 mr-2"></i>
                                        <span class="text-sm text-slate-900">@sectionDetail.ItemsCount</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (sectionDetail.IsReusable)
                                    {
                                        <span class="text-sm text-green-600 font-medium">Global</span>
                                    }
                                    else
                                    {
                                        <span class="text-sm text-slate-500">Page Specific</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                                    @sectionDetail.CreatedAt.ToString("dd/MM/yyyy")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center space-x-2">
                                        <a href="@Url.Action("SectionDetails", "Content", new { id = sectionDetail.Id })"
                                           class="text-purple-600 hover:text-purple-900 transition-colors">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button onclick="editSection(@sectionDetail.Id)"
                                                class="text-blue-600 hover:text-blue-900 transition-colors">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button onclick="duplicateSection(@sectionDetail.Id)"
                                                class="text-green-600 hover:text-green-900 transition-colors">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                        <button onclick="deleteSection(@sectionDetail.Id, '@sectionDetail.Name')"
                                                class="text-red-600 hover:text-red-900 transition-colors">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="text-center py-12 text-slate-500">
                    <i class="fas fa-layer-group text-4xl mb-4"></i>
                    <h6 class="text-lg font-medium mb-2">No sections found</h6>
                    <p class="text-sm mb-4">Create your first reusable section to get started</p>
                    <button type="button" onclick="openCreateSectionModal()" class="py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors inline-flex items-center">
                        <i class="fas fa-plus mr-2"></i> Create Section
                    </button>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.TotalCount > Model.PageSize)
        {
            <div class="px-6 py-4 border-t border-slate-200">
                <div class="flex items-center justify-between">
                    <div class="text-sm text-slate-700">
                        Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount)) of @Model.TotalCount results
                    </div>
                    <div class="flex items-center space-x-2">
                        @if (Model.HasPreviousPage)
                        {
                            <a href="@Url.Action("Sections", new { page = Model.PageNumber - 1 })" 
                               class="px-3 py-2 text-sm font-medium text-slate-500 bg-white border border-slate-300 rounded-md hover:bg-slate-50">
                                Previous
                            </a>
                        }
                        
                        @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.PageNumber + 2, (int)Math.Ceiling((double)Model.TotalCount / Model.PageSize)); i++)
                        {
                            @if (i == Model.PageNumber)
                            {
                                <span class="px-3 py-2 text-sm font-medium text-white bg-purple-600 border border-purple-600 rounded-md">@i</span>
                            }
                            else
                            {
                                <a href="@Url.Action("Sections", new { page = i })" 
                                   class="px-3 py-2 text-sm font-medium text-slate-500 bg-white border border-slate-300 rounded-md hover:bg-slate-50">@i</a>
                            }
                        }
                        
                        @if (Model.HasNextPage)
                        {
                            <a href="@Url.Action("Sections", new { page = Model.PageNumber + 1 })" 
                               class="px-3 py-2 text-sm font-medium text-slate-500 bg-white border border-slate-300 rounded-md hover:bg-slate-50">
                                Next
                            </a>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Create Section Modal -->
<div id="createSectionModal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 hidden"
    onclick="closeCreateSectionModal()">
    <div class="bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto" onclick="event.stopPropagation()">
        <div class="sticky top-0 bg-white border-b border-slate-200 px-6 py-4 z-10">
            <div class="flex items-center justify-between">
                <h3 class="text-xl font-semibold text-slate-800">
                    <i class="fas fa-plus-circle mr-2 text-purple-600"></i> Create New Section
                </h3>
                <button type="button" onclick="closeCreateSectionModal()"
                    class="text-slate-400 hover:text-slate-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <p class="text-sm text-slate-500 mt-1">Create a new reusable section that can be used across multiple pages
            </p>
        </div>

        <div class="p-6">
            <div class="grid grid-cols-1 gap-6">
                <!-- Create New Reusable Section -->
                <div class="border-2 border-dashed border-slate-300 rounded-lg p-6 hover:border-purple-400 transition-colors cursor-pointer"
                    onclick="createNewReusableSection()">
                    <div class="text-center">
                        <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-plus text-2xl text-purple-600"></i>
                        </div>
                        <h4 class="text-lg font-semibold text-slate-800 mb-2">Create New Reusable Section</h4>
                        <p class="text-sm text-slate-500">Build a custom reusable section from scratch with your own content and layout. This section can be used across multiple pages.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/Content/Content.Page.Section.Modal.js"></script>
<script>
    // Modal functions
    function openCreateSectionModal() {
        const modal = document.getElementById('createSectionModal');
        if (modal) {
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }
    }

    function closeCreateSectionModal() {
        const modal = document.getElementById('createSectionModal');
        if (modal) {
            modal.classList.add('hidden');
            document.body.style.overflow = '';
        }
    }

    function createNewReusableSection() {
        closeCreateSectionModal();

        // Open section modal without pageId (for reusable sections)
        if (typeof SectionModal !== "undefined" && SectionModal.show) {
            SectionModal.show(0, 0); // sectionId = 0, pageId = 0 for new reusable section
        } else {
            console.error("SectionModal not available");
        }
    }

    function editSection(sectionId) {
        window.location.href = `/Content/SectionDetails/${sectionId}`;
    }

    function duplicateSection(sectionId) {
        if (confirm('Are you sure you want to duplicate this section?')) {
            // Implementation for duplicating section
            console.log('Duplicate section:', sectionId);
        }
    }

    async function deleteSection(sectionId, sectionName) {
        // Check if SwalHelper is available for better UX
        if (typeof SwalHelper !== 'undefined' && typeof window.SwalHelper !== 'undefined') {
            SwalHelper.confirmDelete(
                'Delete Section',
                `Are you sure you want to delete the section "${sectionName}"? This action cannot be undone.`,
                {
                    confirmButtonText: '<i class="fas fa-trash mr-2"></i>Yes, Delete',
                    cancelButtonText: '<i class="fas fa-times mr-2"></i>Cancel'
                }
            ).then(async (result) => {
                if (result.isConfirmed) {
                    SwalHelper.loading('Deleting...', 'Section is being deleted, please wait...');
                    
                    try {
                        const deleteResult = await ContentServices.deleteSection(sectionId);

                        if (deleteResult.success) {
                            Swal.close();
                            SwalHelper.toast('Section deleted successfully', 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            Swal.close();
                            SwalHelper.error('Error', deleteResult.message || 'Failed to delete section');
                        }
                    } catch (error) {
                        Swal.close();
                        SwalHelper.error('Error', 'An error occurred while deleting the section.');
                    }
                }
            });
        } else {
            // Fallback to confirm dialog
            if (confirm(`Are you sure you want to delete the section "${sectionName}"? This action cannot be undone.`)) {
                try {
                    const result = await ContentServices.deleteSection(sectionId);

                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + result.message);
                    }
                } catch (error) {
                    alert('An error occurred while deleting the section.');
                }
            }
        }
    }
</script>

@model PazarAtlasi.CMS.Application.Dtos.TemplateConfigurationDto

@{
    var itemConfig = Model.ItemConfiguration;
    var uiConfig = itemConfig.UIConfiguration;
}

<div class="bg-blue-50 rounded-lg p-4 border border-blue-200" data-template-id="@Model.TemplateId">
    <h4 class="font-medium text-slate-800 mb-4 flex items-center">
        <i class="fas fa-@(uiConfig.IconClass ?? "images") mr-2 text-blue-600"></i>
        Section Items
        <span id="itemsCountBadge" class="ml-2 px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
            0 items
        </span>
        @if (itemConfig.MinItems > 0)
        {
            <span class="ml-2 text-xs text-slate-500">(Min: @itemConfig.MinItems)</span>
        }
        @if (itemConfig.MaxItems.HasValue)
        {
            <span class="ml-2 text-xs text-slate-500">(Max: @itemConfig.MaxItems)</span>
        }
    </h4>

    <div id="itemsGrid" class="@GetLayoutClass(uiConfig.Layout, uiConfig.Columns)">
        <!-- Items will be added dynamically via JavaScript -->
    </div>

    @if (itemConfig.AllowDynamicItems)
    {
        <div class="mt-4 text-center">
            <button type="button" onclick="SectionModal.addSectionItem()" id="addItemButton"
                class="py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
                <i class="fas fa-plus mr-2"></i> @(uiConfig.AddButtonText ?? "Add Item")
            </button>
        </div>
    }
</div>

<!-- Template for individual section items (will be cloned by JavaScript) -->
<template id="sectionItemTemplate">
    <div class="section-item-card border border-slate-200 rounded-lg p-4 bg-white" data-item-id="">
        <div class="flex items-center justify-between mb-3">
            <div class="flex items-center">
                @if (uiConfig.ShowReorder)
                {
                    <div class="drag-handle cursor-move mr-2 p-2 text-slate-400 hover:text-slate-600">
                        <i class="fas fa-grip-vertical"></i>
                    </div>
                }
                <span class="text-sm font-medium text-slate-700 item-number">Item #1</span>
            </div>
            @if (itemConfig.AllowDynamicItems)
            {
                <button type="button" onclick="SectionModal.removeSectionItem(this)"
                    class="text-red-600 hover:text-red-800 text-sm">
                    <i class="fas fa-trash"></i>
                </button>
            }
        </div>
        <div class="space-y-3 item-fields">
            @foreach (var field in itemConfig.Fields)
            {
                @await Html.PartialAsync("~/Views/Shared/Content/_SectionItemField.cshtml", field)
            }
        </div>
    </div>
</template>

<!-- Store configuration as JSON for JavaScript -->
<script type="application/json" id="templateConfiguration">
@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model))
</script>

@functions {
    private string GetLayoutClass(string layout, int columns)
    {
        return layout switch
        {
            "grid" => $"grid grid-cols-1 md:grid-cols-{columns} gap-4",
            "list" => "space-y-4",
            "carousel" => "grid grid-cols-1 md:grid-cols-3 gap-4",
            _ => "space-y-4"
        };
    }
}
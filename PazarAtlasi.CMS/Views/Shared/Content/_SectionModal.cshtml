@model PazarAtlasi.CMS.Models.ViewModels.SectionViewModel

<div class="section-modal bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto"
    style="max-height: 90vh; overflow-y: auto;">
    <div class="sticky top-0 bg-white border-b border-slate-200 px-6 py-4 z-10">
        <div class="flex items-center justify-between">
            <h3 class="text-xl font-semibold text-slate-800">
                <span><i class="fas fa-plus-circle mr-2 text-purple-600"></i> Add Page Section</span>
            </h3>
            <button type="button" onclick="SectionModal.close()" class="text-slate-400 hover:text-slate-600">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        <p class="text-sm text-slate-500 mt-1">Configure section and add content items</p>
    </div>

    <form id="sectionForm" class="p-6 space-y-6">
        <input type="hidden" id="sectionId" value="@Model.Id" />
        <input type="hidden" id="pageId" value="@Model.PageId" />

        <!-- Section Settings -->
        <div class="bg-slate-50 rounded-lg p-4">
            <h4 class="font-medium text-slate-800 mb-4 flex items-center">
                <i class="fas fa-cog mr-2 text-purple-600"></i> Section Settings
            </h4>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label class="block text-sm font-medium text-slate-700 mb-1">Section Type</label>
                    <select id="sectionType"
                        class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400"
                        onchange="SectionModal.handleSectionTypeChange(this.value)">
                        @foreach (var sectionType in Enum.GetValues<PazarAtlasi.CMS.Domain.Common.SectionType>())
                        {
                            @if (Model.Type == sectionType)
                            {
                                <option value="@((int)sectionType)" selected>@sectionType.ToString()</option>
                            }
                            else
                            {
                                <option value="@((int)sectionType)">@sectionType.ToString()</option>
                            }
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-slate-700 mb-1">Template</label>
                    <select id="sectionTemplate"
                        class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400"
                        onchange="SectionModal.selectTemplate(this.value)">
                        <option value="">Select a template...</option>
                    </select>
                    <p class="text-xs text-slate-500 mt-1">Choose a template for this section type</p>
                </div>

                <!-- Grid Configuration (shown only when Grid is selected) -->
                <div id="gridConfiguration" class="hidden">
                    <label class="block text-sm font-medium text-slate-700 mb-1">Grid Layout</label>
                    <select id="gridLayout"
                        class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400"
                        onchange="handleGridLayoutChange(this.value)">
                        <option value="3">3 Items (Vertical)</option>
                        <option value="6">6 Items (3x2 Grid)</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-slate-700 mb-1">Status</label>
                    <select id="modalSectionStatus"
                        class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-200 focus:border-purple-400">
                        @foreach (var status in Enum.GetValues<PazarAtlasi.CMS.Domain.Common.Status>())
                        {
                            @if (Model.Status == status)
                            {
                                <option value="@((int)status)" selected>@status.ToString()</option>
                            }
                            else
                            {
                                <option value="@((int)status)">@status.ToString()</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Section Items -->
        <div id="sectionItemsContainer" class="bg-blue-50 rounded-lg p-4 border border-blue-200">
            <h4 class="font-medium text-slate-800 mb-4 flex items-center">
                <i class="fas fa-images mr-2 text-blue-600"></i> Section Items
                <span id="itemsCountBadge" class="ml-2 px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
                    @(Model.SectionItems?.Count ?? 0) items
                </span>
            </h4>

            <div id="itemsGrid" class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Items will be dynamically generated here -->
            </div>

            <div class="mt-4 text-center">
                <button type="button" id="addItemBtn" onclick="SectionModal.addSectionItem()"
                    class="py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
                    <i class="fas fa-plus mr-2"></i> Add Item
                </button>
            </div>
        </div>

        <!-- Section Translations -->
        <div class="bg-green-50 rounded-lg p-4 border border-green-200">
            <h4 class="font-medium text-slate-800 mb-4 flex items-center">
                <i class="fas fa-language mr-2 text-green-600"></i> Section Translations
            </h4>

            <!-- Language Tabs -->
            <div class="flex space-x-1 mb-4 bg-white rounded-lg p-1 border border-slate-200">
                @foreach (var lang in Model.AvailableLanguages)
                {
                    <button type="button"
                        class="language-tab flex-1 px-3 py-2 text-sm font-medium rounded-md transition-colors @(lang.IsDefault ? "bg-green-100 text-green-800" : "text-slate-600 hover:text-slate-800 hover:bg-slate-50")"
                        data-language-id="@lang.Id" onclick="switchLanguageTab(@lang.Id)">
                        @lang.Code.ToUpper()
                        @if (lang.IsDefault)
                        {
                            <span class="ml-1 text-xs">‚óè</span>
                        }
                    </button>
                }
            </div>

            <!-- Translation Content -->
            <div id="sectionTranslationsContainer">
                @foreach (var lang in Model.AvailableLanguages)
                {
                    var translation = Model.Translations.FirstOrDefault(t => t.LanguageId == lang.Id);
                    <div class="translation-content @(lang.IsDefault ? "" : "hidden")" data-language-id="@lang.Id">
                        <div class="bg-white rounded-lg p-4 border border-slate-200">
                            <div class="flex items-center mb-3">
                                <i class="fas fa-flag mr-2 text-green-600"></i>
                                <span class="font-medium text-slate-700">@lang.Name (@lang.Code)</span>
                                @if (lang.IsDefault)
                                {
                                    <span class="ml-2 px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded">Default</span>
                                }
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-sm font-medium text-slate-700 mb-1">Section Title</label>
                                    <input type="text"
                                        class="section-translation-title w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-200 focus:border-green-400"
                                        value="@(translation?.Title ?? "")" placeholder="Enter section title" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-slate-700 mb-1">Section Description</label>
                                    <textarea
                                    class="section-translation-description w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-200 focus:border-green-400"
                                    rows="2"
                                    placeholder="Enter section description">@(translation?.Description ?? "")</textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex items-center justify-end space-x-3 pt-4 border-t border-slate-200">
            <button type="button" onclick="SectionModal.close()"
                class="py-2 px-4 bg-slate-200 hover:bg-slate-300 text-slate-700 rounded-lg text-sm transition-colors">
                <i class="fas fa-times mr-2"></i> Cancel
            </button>
            <button type="button" onclick="SectionModal.save()"
                class="py-2 px-4 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors">
                <i class="fas fa-save mr-2"></i> Save Section
            </button>
        </div>

    </form>
</div>

<style>
    .item-card {
        border: 2px dashed #e2e8f0;
        border-radius: 0.5rem;
        padding: 1rem;
        text-align: center;
        transition: all 0.2s;
        background: white;
        min-height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .item-card:hover {
        border-color: #a855f7;
        box-shadow: 0 4px 12px rgba(168, 85, 247, 0.15);
    }

    .item-card.filled {
        border-style: solid;
        border-color: #10b981;
        background: #f0fdf4;
    }

    .item-preview img {
        width: 100%;
        height: 120px;
        object-fit: cover;
        border-radius: 0.375rem;
    }

    .item-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 80px;
    }

    .video-preview,
    .text-preview {
        width: 100%;
        height: 80px;
        border-radius: 0.375rem;
    }

    .language-tab.active {
        background-color: #dcfce7 !important;
        color: #166534 !important;
    }

    .translation-content {
        transition: opacity 0.2s ease-in-out;
    }

    .translation-content.hidden {
        display: none;
    }
</style>

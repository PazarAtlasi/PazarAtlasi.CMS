@model PazarAtlasi.CMS.Models.ViewModels.SectionItemsListViewModel

@{
    var config = Model.Configuration;
    var itemConfig = config?.ItemConfiguration;
}

@if (itemConfig != null)
{
    <div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
        <h4 class="font-medium text-slate-800 mb-4 flex items-center">
            <i class="fas fa-@(itemConfig.UIConfiguration?.IconClass ?? "images") mr-2 text-blue-600"></i>
            Section Items
            <span id="itemsCountBadge" class="ml-2 px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
                @Model.SectionItems.Count item@(Model.SectionItems.Count != 1 ? "s" : "")
            </span>
            @if (itemConfig.MinItems > 0)
            {
                <span class="ml-2 text-xs text-slate-500">(Min: @itemConfig.MinItems)</span>
            }
            @if (itemConfig.MaxItems > 0)
            {
                <span class="ml-2 text-xs text-slate-500">(Max: @itemConfig.MaxItems)</span>
            }
        </h4>

        <div id="itemsGrid" class="@GetLayoutClass(itemConfig.UIConfiguration?.Layout, itemConfig.UIConfiguration?.Columns ?? 3)">
            @foreach (var item in Model.SectionItems)
            {
                <div class="section-item-card border border-slate-200 rounded-lg p-4 bg-white" data-item-id="@item.TempId">
                    <div class="flex items-center justify-between mb-3">
                        <div class="flex items-center">
                            @if (itemConfig.UIConfiguration?.ShowReorder == true)
                            {
                                <div class="drag-handle cursor-move mr-2 p-2 text-slate-400 hover:text-slate-600">
                                    <i class="fas fa-grip-vertical"></i>
                                </div>
                            }
                            <span class="text-sm font-medium text-slate-700 item-number">Item #@(Model.SectionItems.IndexOf(item) + 1)</span>
                        </div>
                        @if (itemConfig.AllowDynamicItems)
                        {
                            <button type="button" onclick="SectionModal.removeSectionItem('@item.TempId')"
                                    class="text-red-600 hover:text-red-800 text-sm">
                                <i class="fas fa-trash"></i>
                            </button>
                        }
                    </div>

                    <div class="space-y-3">
                        @foreach (var field in itemConfig.Fields ?? new List<PazarAtlasi.CMS.Application.Dtos.SectionItemField>())
                        {
                            ViewBag.Field = field;
                            ViewBag.Item = item;
                            ViewBag.Value = item.Data != null && item.Data.ContainsKey(field.Name) == true ? item.Data[field.Name]?.ToString() : field.DefaultValue ?? "";

                            @await Html.PartialAsync("~/Views/Shared/Content/_SectionItemField.cshtml", field)
                        }

                        @if (itemConfig.NestedItems != null && item.NestedItems?.Any() == true)
                        {
                            <div class="mt-4 pt-4 border-t border-slate-200">
                                <div class="flex items-center justify-between mb-3">
                                    <h5 class="text-xs font-semibold text-slate-700 uppercase tracking-wider">
                                        <i class="fas fa-level-down-alt mr-2 text-purple-600"></i>
                                        Dropdown Items (@item.NestedItems.Count)
                                    </h5>
                                    @if (itemConfig.NestedItems.AllowDynamicItems && 
                                         (itemConfig.NestedItems.MaxItems == null || item.NestedItems.Count < itemConfig.NestedItems.MaxItems))
                                    {
                                        <button type="button" onclick="SectionModal.addNestedItem('@item.TempId')"
                                                class="px-2 py-1 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded text-xs transition-colors">
                                            <i class="fas fa-plus mr-1"></i> @(itemConfig.NestedItems.UIConfiguration?.AddButtonText ?? "Add Item")
                                        </button>
                                    }
                                </div>
                                <div id="nestedItems_@item.TempId" class="space-y-2 ml-4 pl-3 border-l-2 border-purple-200">
                                    @foreach (var nestedItem in item.NestedItems)
                                    {
                                        <div class="nested-item-card bg-purple-50 border border-purple-200 rounded p-3" data-nested-id="@nestedItem.TempId">
                                            <div class="flex items-center justify-between mb-2">
                                                <span class="text-xs font-medium text-slate-600">
                                                    <i class="fas fa-link mr-1"></i> Dropdown #@(item.NestedItems.IndexOf(nestedItem) + 1)
                                                </span>
                                                @if (itemConfig.NestedItems.AllowDynamicItems)
                                                {
                                                    <button type="button" onclick="SectionModal.removeNestedItem('@item.TempId', '@nestedItem.TempId')"
                                                            class="text-red-500 hover:text-red-700 text-xs">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                }
                                            </div>
                                            <div class="space-y-2">
                                                @foreach (var field in itemConfig.NestedItems.Fields ?? new List<PazarAtlasi.CMS.Application.Dtos.SectionItemField>())
                                                {
                                                    ViewBag.Field = field;
                                                    ViewBag.NestedItem = nestedItem;
                                                    ViewBag.ParentTempId = item.TempId;
                                                    ViewBag.Value = nestedItem.Data?.ContainsKey(field.Name) == true ? nestedItem.Data[field.Name]?.ToString() : field.DefaultValue ?? "";

                                                    @await Html.PartialAsync("~/Views/Shared/Content/_SectionItemNestedField.cshtml", field)
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        @if (itemConfig.AllowDynamicItems && 
             (itemConfig.MaxItems == null || Model.SectionItems.Count < itemConfig.MaxItems))
        {
            <div class="mt-4 text-center">
                <button type="button" onclick="SectionModal.addSectionItem()"
                        id="addItemButton"
                        class="py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
                    <i class="fas fa-plus mr-2"></i> @(itemConfig.UIConfiguration?.AddButtonText ?? "Add Item")
                </button>
            </div>
        }
    </div>

    <!-- Store template configuration for JavaScript -->
    <script type="application/json" id="templateConfiguration">
        @Html.Raw(System.Text.Json.JsonSerializer.Serialize(config))
    </script>
}
else
{
    <div class="bg-slate-50 rounded-lg p-6 text-center text-slate-500">
        <i class="fas fa-info-circle text-2xl mb-2"></i>
        <p class="text-sm">Select a template to configure section items</p>
    </div>
}

@functions {
    string GetLayoutClass(string? layout, int columns = 3)
    {
        return layout?.ToLower() switch
        {
            "grid" => $"grid grid-cols-1 md:grid-cols-{columns} gap-4",
            "list" => "space-y-4",
            "carousel" => "grid grid-cols-1 md:grid-cols-3 gap-4",
            _ => "space-y-4"
        };
    }
}
@{
    ViewData["Title"] = @Html.L("Localization.AddKey");
    var supportedLanguages = ViewBag.SupportedLanguages as Dictionary<string, string>;
    var categories = ViewBag.Categories as List<string>;
}

<div class="add-localization">
    <!-- Page Header -->
    <div class="flex flex-wrap items-center justify-between mb-8">
        <div class="w-full lg:w-2/3 mb-4 lg:mb-0">
            <div class="page-title-box">
                <h4 class="text-2xl font-bold text-slate-800 inline-block after:content-[''] after:absolute after:bottom-[-8px] after:left-0 after:w-10 after:h-[3px] after:bg-purple-800 after:rounded-full">
                    @Html.L("Localization.AddKey")
                </h4>
                <p class="text-slate-500 mt-3 max-w-xl">@Html.L("Localization.AddKeyDescription")</p>
            </div>
        </div>
        <div class="w-full lg:w-1/3 text-left lg:text-right">
            <a href="@Url.Action("Localization")" class="py-2 px-4 bg-slate-600 hover:bg-slate-700 text-white rounded-lg text-sm transition-colors inline-flex items-center shadow-sm">
                <i class="fas fa-arrow-left mr-2"></i> @Html.L("Common.Back")
            </a>
        </div>
    </div>

    <!-- Form -->
    <div class="bg-white rounded-xl shadow-md">
        <div class="p-6 border-b border-slate-100">
            <h5 class="text-lg font-semibold text-slate-800">@Html.L("Localization.KeyDetails")</h5>
        </div>
        
        <form method="post" class="p-6">
            @Html.AntiForgeryToken()
            
            <!-- Key Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div>
                    <label class="block text-sm font-medium text-slate-700 mb-2">
                        @Html.L("Localization.Key") <span class="text-red-500">*</span>
                    </label>
                    <input type="text" name="key" required 
                           class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                           placeholder="@Html.L("Localization.KeyPlaceholder")">
                    <p class="text-xs text-slate-500 mt-1">@Html.L("Localization.KeyHint")</p>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-slate-700 mb-2">@Html.L("Dashboard.Category")</label>
                    <select name="category" class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <option value="">@Html.L("Localization.SelectCategory")</option>
                        @if (categories != null)
                        {
                            @foreach (var cat in categories)
                            {
                                <option value="@cat">@cat</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="mb-8">
                <label class="block text-sm font-medium text-slate-700 mb-2">@Html.L("Localization.Description")</label>
                <textarea name="description" rows="3" 
                          class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                          placeholder="@Html.L("Localization.DescriptionPlaceholder")"></textarea>
            </div>

            <!-- Language Values -->
            <div class="mb-8">
                <h6 class="text-md font-semibold text-slate-800 mb-4">@Html.L("Localization.Translations")</h6>
                <div class="grid grid-cols-1 gap-4">
                    @if (supportedLanguages != null)
                    {
                        @foreach (var lang in supportedLanguages)
                        {
                            <div class="border border-slate-200 rounded-lg p-4">
                                <label class="block text-sm font-medium text-slate-700 mb-2">
                                    <i class="fas fa-language mr-1"></i> @lang.Value (@lang.Key)
                                </label>
                                <textarea name="values[@lang.Key]" rows="2" 
                                          class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                          placeholder="@string.Format(Html.L("Localization.TranslationPlaceholder"), lang.Value)"></textarea>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Form Actions -->
            <div class="flex items-center justify-end space-x-3 pt-6 border-t border-slate-200">
                <a href="@Url.Action("Localization")" class="py-2 px-4 bg-slate-200 hover:bg-slate-300 text-slate-700 rounded-lg text-sm transition-colors">
                    @Html.L("Common.Cancel")
                </a>
                <button type="submit" class="py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors">
                    <i class="fas fa-save mr-2"></i> @Html.L("Common.Save")
                </button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Auto-generate key from first translation
    const keyInput = document.querySelector('input[name="key"]');
    const firstTranslation = document.querySelector('textarea[name^="values["]');
    
    if (firstTranslation && keyInput) {
        firstTranslation.addEventListener('input', function() {
            if (!keyInput.value) {
                const value = this.value.trim();
                if (value) {
                    // Generate key from translation
                    const key = value
                        .toLowerCase()
                        .replace(/[^a-z0-9\s]/g, '')
                        .replace(/\s+/g, '.')
                        .substring(0, 50);
                    keyInput.value = key;
                }
            }
        });
    }
});
</script>
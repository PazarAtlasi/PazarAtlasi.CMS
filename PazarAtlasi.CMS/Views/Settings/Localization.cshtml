@model List<IGrouping<string, PazarAtlasi.CMS.Application.Models.Localization.LanguageValueItem>>
@{
    ViewData["Title"] = @Html.L("Navigation.Localization");
    var search = ViewBag.Search as string;
    var category = ViewBag.Category as string;
    var categories = ViewBag.Categories as List<string>;
    var page = (int)ViewBag.Page;
    var pageSize = (int)ViewBag.PageSize;
    var totalKeys = (int)ViewBag.TotalKeys;
    var supportedLanguages = ViewBag.SupportedLanguages as Dictionary<string, string>;
}

<div class="localization-management">
    <!-- Page Header -->
    <div class="flex flex-wrap items-center justify-between mb-8">
        <div class="w-full lg:w-2/3 mb-4 lg:mb-0">
            <div class="page-title-box">
                <h4 class="text-2xl font-bold text-slate-800 inline-block after:content-[''] after:absolute after:bottom-[-8px] after:left-0 after:w-10 after:h-[3px] after:bg-purple-800 after:rounded-full">
                    @Html.L("Navigation.Localization")
                </h4>
                <p class="text-slate-500 mt-3 max-w-xl">@Html.L("Localization.Description")</p>
            </div>
        </div>
        <div class="w-full lg:w-1/3 text-left lg:text-right">
            <div class="inline-flex items-center space-x-2">
                <button onclick="refreshCache()" class="py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors inline-flex items-center shadow-sm">
                    <i class="fas fa-sync-alt mr-2"></i> @Html.L("Common.Refresh") Cache
                </button>
                <a href="@Url.Action("AddLocalization")" class="py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors inline-flex items-center shadow-sm">
                    <i class="fas fa-plus mr-2"></i> @Html.L("Common.Add") Key
                </a>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-xl shadow-md mb-6">
        <div class="p-6">
            <form method="get" class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label class="block text-sm font-medium text-slate-700 mb-2">@Html.L("Common.Search")</label>
                    <input type="text" name="search" value="@search" placeholder="@Html.L("Localization.SearchPlaceholder")" 
                           class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                </div>
                <div>
                    <label class="block text-sm font-medium text-slate-700 mb-2">@Html.L("Dashboard.Category")</label>
                    <select name="category" class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <option value="">@Html.L("Common.All")</option>
                        @if (categories != null)
                        {
                            @foreach (var cat in categories)
                            {
                                <option value="@cat" selected="@(cat == category)">@cat</option>
                            }
                        }
                    </select>
                </div>
                <div class="flex items-end">
                    <button type="submit" class="w-full py-2 px-4 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-search mr-2"></i> @Html.L("Common.Filter")
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Results -->
    <div class="bg-white rounded-xl shadow-md">
        <div class="p-6 border-b border-slate-100">
            <div class="flex items-center justify-between">
                <h5 class="text-lg font-semibold text-slate-800">
                    @Html.L("Localization.Keys") (@totalKeys)
                </h5>
                <div class="text-sm text-slate-500">
                    @string.Format(Html.L("Localization.ShowingResults"), (page - 1) * pageSize + 1, Math.Min(page * pageSize, totalKeys), totalKeys)
                </div>
            </div>
        </div>

        @if (Model.Any())
        {
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-slate-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">@Html.L("Localization.Key")</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">@Html.L("Dashboard.Category")</th>
                            @foreach (var lang in supportedLanguages)
                            {
                                <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">@lang.Value</th>
                            }
                            <th class="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">@Html.L("Common.Actions")</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-slate-200">
                        @foreach (var keyGroup in Model)
                        {
                            var firstItem = keyGroup.First();
                            <tr class="hover:bg-slate-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-slate-900">@keyGroup.Key</div>
                                    @if (!string.IsNullOrEmpty(firstItem.LangDescription))
                                    {
                                        <div class="text-xs text-slate-500">@firstItem.LangDescription</div>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (!string.IsNullOrEmpty(firstItem.Category))
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                            @firstItem.Category
                                        </span>
                                    }
                                </td>
                                @foreach (var lang in supportedLanguages)
                                {
                                    var langItem = keyGroup.FirstOrDefault(x => x.LangCode == lang.Key);
                                    <td class="px-6 py-4">
                                        @if (langItem != null)
                                        {
                                            <div class="text-sm text-slate-900 max-w-xs truncate" title="@langItem.LangVal">
                                                @langItem.LangVal
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-xs text-slate-400 italic">@Html.L("Localization.NotTranslated")</span>
                                        }
                                    </td>
                                }
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center justify-end space-x-2">
                                        <a href="@Url.Action("EditLocalization", new { key = keyGroup.Key })" 
                                           class="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50" title="@Html.L("Common.Edit")">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button onclick="deleteKey('@keyGroup.Key')" 
                                                class="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50" title="@Html.L("Common.Delete")">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (totalKeys > pageSize)
            {
                <div class="px-6 py-3 border-t border-slate-200">
                    <div class="flex items-center justify-between">
                        <div class="text-sm text-slate-700">
                            @string.Format(Html.L("Localization.ShowingResults"), (page - 1) * pageSize + 1, Math.Min(page * pageSize, totalKeys), totalKeys)
                        </div>
                        <div class="flex items-center space-x-2">
                            @if (page > 1)
                            {
                                <a href="@Url.Action("Localization", new { search, category, page = page - 1, pageSize })" 
                                   class="px-3 py-2 text-sm bg-white border border-slate-300 rounded-md hover:bg-slate-50">
                                    @Html.L("Common.Previous")
                                </a>
                            }
                            
                            @for (int i = Math.Max(1, page - 2); i <= Math.Min(page + 2, (int)Math.Ceiling((double)totalKeys / pageSize)); i++)
                            {
                                <a href="@Url.Action("Localization", new { search, category, page = i, pageSize })" 
                                   class="px-3 py-2 text-sm @(i == page ? "bg-purple-600 text-white" : "bg-white text-slate-700 hover:bg-slate-50") border border-slate-300 rounded-md">
                                    @i
                                </a>
                            }
                            
                            @if (page < Math.Ceiling((double)totalKeys / pageSize))
                            {
                                <a href="@Url.Action("Localization", new { search, category, page = page + 1, pageSize })" 
                                   class="px-3 py-2 text-sm bg-white border border-slate-300 rounded-md hover:bg-slate-50">
                                    @Html.L("Common.Next")
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="p-12 text-center">
                <div class="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-language text-2xl text-slate-400"></i>
                </div>
                <h3 class="text-lg font-medium text-slate-900 mb-2">@Html.L("Localization.NoKeys")</h3>
                <p class="text-slate-500 mb-4">@Html.L("Localization.NoKeysDescription")</p>
                <a href="@Url.Action("AddLocalization")" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors">
                    <i class="fas fa-plus mr-2"></i> @Html.L("Localization.AddFirstKey")
                </a>
            </div>
        }
    </div>
</div>

<script>
function refreshCache() {
    fetch('@Url.Action("RefreshLocalizationCache")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: '@Html.L("Common.Success")',
                text: data.message,
                timer: 2000,
                showConfirmButton: false
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: '@Html.L("Common.Error")',
                text: data.message
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: '@Html.L("Common.Error")',
            text: '@Html.L("Common.UnexpectedError")'
        });
    });
}

function deleteKey(key) {
    Swal.fire({
        title: '@Html.L("Common.AreYouSure")',
        text: '@Html.L("Localization.DeleteConfirmation")',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc2626',
        cancelButtonColor: '#6b7280',
        confirmButtonText: '@Html.L("Common.Delete")',
        cancelButtonText: '@Html.L("Common.Cancel")'
    }).then((result) => {
        if (result.isConfirmed) {
            const formData = new FormData();
            formData.append('key', key);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            fetch('@Url.Action("DeleteLocalization")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: '@Html.L("Common.Success")',
                        text: data.message,
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: '@Html.L("Common.Error")',
                        text: data.message
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: '@Html.L("Common.Error")',
                    text: '@Html.L("Common.UnexpectedError")'
                });
            });
        }
    });
}
</script>